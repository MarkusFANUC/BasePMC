!!:--------------------------------------------------------------------------:
!!: File              : m_code_3_{{PATH}}.src                                     :
!!: Creation date     : 16.09.2012                                           :
!!: Last modification : see table below                                      :
!!: Author            : FANUC FA Switzerland / Peter Bloesch                 :
!!: Description       : Decoding three m codes per block                     :
!!:--------------------------------------------------------------------------:
!!
!!:--------------------------------------------------------------------------:
!!:                     Modification                                         :
!!:--------------------------------------------------------------------------:
!!: Date   :Version: Sign  :Description                                      :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:

!! ===========================================================================
!! Code
!! ===========================================================================

!! ---------------------------------------------------------------------------
!! {{PATH}}: the M-COD module uses the high speed M/S/T/B interface.
!! up to 3 m codes can be specified in one block.
!! parameter setting: N03001 bit 7 = 1 (MHI), N03404 bit 7 = 1(M3B),
!! N03010 = 4/8, N03011 = 4/8 (pmc exec time 4ms or 8ms)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: the M-COD module uses the high speed M/S/T/B interface.
up to 3 M codes can be specified in one block.
param. setting: N03001 bit 7 = 1 (MHI), N03404 bit 7 = 1 (M3B),
N03010 = 4/8 , N03011 = 4/8 (pmc exec time 4ms or 8ms)
*)
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: strobe and decoding of the 1st m code 
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: strobe and decoding of the 1st m code 
*)
#endif
                 RD        MF_{{PATH}}           ;"m-function strobe signal"
                 AND.NOT   MFIN_{{PATH}}         ;"aux. funct. compl. signal"
                 RD.STK.NOT MF_{{PATH}}          ;"m-function strobe signal"
                 AND       MFIN_{{PATH}}         ;"aux. funct. compl. signal"
                 OR.STK
                 AND       DEN_{{PATH}}          ;"distribution end signal"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       m1code_{{PATH}}       ;"1st m code is active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: rising and falling edge of the 1st m code (m1code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: rising and falling edge of the 1st m code (m1code)
*)
#endif
                 RD        m1code_{{PATH}}       ;"1st m code is active"
                 AND.NOT   m1codm_{{PATH}}       ;"memory m code 1 active"
                 WRT       rem1co_{{PATH}}       ;"re 1st m code active"

                 RD.NOT    m1code_{{PATH}}       ;"1st m code is active"
                 AND       m1codm_{{PATH}}       ;"memory m code 1 active"
                 WRT       fem1co_{{PATH}}       ;"fe 1st m code active"

                 RD        m1code_{{PATH}}       ;"1st m code is active"
                 WRT       m1codm_{{PATH}}       ;"memory m code 1 active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: strobe and decoding of the 2nd m code 
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: strobe and decoding of the 2nd m code 
*)
#endif
                 RD        MF2_{{PATH}}          ;"2nd m function strobe"
                 AND.NOT   MFIN2_{{PATH}}        ;"2nd m funct. compl. signal"
                 RD.STK.NOT MF2_{{PATH}}         ;"2nd m function strobe"
                 AND       MFIN2_{{PATH}}        ;"2nd m funct. compl. signal"
                 OR.STK
                 AND       DEN_{{PATH}}          ;"distribution end signal"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       m2code_{{PATH}}       ;"2nd m code is active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: rising and falling edge of the 2nd m code (m2code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: rising and falling edge of the 2nd m code (m2code)
*)
#endif
                 RD        m2code_{{PATH}}       ;"2nd m code is active"
                 AND.NOT   m2codm_{{PATH}}       ;"memory m code 2 active"
                 WRT       rem2co_{{PATH}}       ;"re 2nd m code active"

                 RD.NOT    m2code_{{PATH}}       ;"2nd m code is active"
                 AND       m2codm_{{PATH}}       ;"memory m code 2 active"
                 WRT       fem2co_{{PATH}}       ;"fe 2nd m code active"

                 RD        m2code_{{PATH}}       ;"2nd m code is active"
                 WRT       m2codm_{{PATH}}       ;"memory m code 2 active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: strobe and decoding of the 3rd m code 
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: strobe and decoding of the 3rd m code 
*)
#endif
                 RD        MF3_{{PATH}}          ;"3rd m function strobe"
                 AND.NOT   MFIN3_{{PATH}}        ;"3rd m funct. compl. signal"
                 RD.STK.NOT MF3_{{PATH}}         ;"3rd m function strobe"
                 AND       MFIN3_{{PATH}}        ;"3rd m funct. compl. signal"
                 OR.STK
                 AND       DEN_{{PATH}}          ;"distribution end signal"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       m3code_{{PATH}}       ;"3rd m code is active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: rising and falling edge of the 3rd m code (m3code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: rising and falling edge of the 3rd m code (m3code)
*)
#endif
                 RD        m3code_{{PATH}}       ;"3rd m code is active"
                 AND.NOT   m3codm_{{PATH}}       ;"memory m code 3 active"
                 WRT       rem3co_{{PATH}}       ;"re 3rd m code active"

                 RD.NOT    m3code_{{PATH}}       ;"3rd m code is active"
                 AND       m3codm_{{PATH}}       ;"memory m code 3 active"
                 WRT       fem3co_{{PATH}}       ;"fe 3rd m code active"

                 RD        m3code_{{PATH}}       ;"3rd m code is active"
                 WRT       m3codm_{{PATH}}       ;"memory m code 3 active"

!! ---------------------------------------------------------------------------
!! {{PATH}}: m code range check 1st m code: max. value <= table length * 8 -1
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: m code range check 1st m code
max. value <= table length * 8 -1
*)
#endif
                 RD        rem1co_{{PATH}}       ;"re 1st m code active"
                 GTD
                           MFCS_{{PATH}}         ;"m-function code signal"
                           399
                 SET       erm1co_{{PATH}}       ;"range error 1st m code"

                 RD        rem1co_{{PATH}}       ;"re 1st m code active"
                 AND.NOT   erm1co_{{PATH}}       ;"range error 1st m code"
                 WRT       m1cook_{{PATH}}       ;"impulse first m code ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}:  error handling 1st m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: error handling 1st m code
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
#if demo_control == 1
                 OR        m1fin_{{PATH}}        ;"1st m-function finished"
#endif
                 AND       erm1co_{{PATH}}       ;"range error 1st m code"
                 RST       erm1co_{{PATH}}       ;"range error 1st m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: m code range check 2nd m code: max. value <= table length * 8 -1
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: m code range check 2nd m code
max. value <= table length * 8 -1
*)
#endif
                 RD        rem2co_{{PATH}}       ;"re 2nd m code active"
                 GTW
                           MF2CS_{{PATH}}        ;"2nd m function code signal"
                           399
                 SET       erm2co_{{PATH}}       ;"range error 2nd m code"

                 RD        rem2co_{{PATH}}       ;"re 2nd m code active"
                 AND.NOT   erm2co_{{PATH}}       ;"range error 2nd m code"
                 WRT       m2cook_{{PATH}}       ;"impulse first m code ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}:  error handling 2nd m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: error handling 2nd m code
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
#if demo_control == 1
                 OR        m2fin_{{PATH}}        ;"2nd m-function finished"
#endif
                 AND       erm2co_{{PATH}}       ;"range error 2nd m code"
                 RST       erm2co_{{PATH}}       ;"range error 2nd m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: m code range check 3rd m code: max. value <= table length * 8 -1
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: m code range check 3rd m code
max. value <= table length * 8 -1
*)
#endif
                 RD        rem3co_{{PATH}}       ;"re 3rd m code active"
                 GTW
                           MF3CS_{{PATH}}        ;"3rd m function code signal"
                           399
                 SET       erm3co_{{PATH}}       ;"range error 3rd m code"

                 RD        rem3co_{{PATH}}       ;"re 3rd m code active"
                 AND.NOT   erm3co_{{PATH}}       ;"range error 3rd m code"
                 WRT       m3cook_{{PATH}}       ;"impulse 3rd m code ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}:  error handling 3rd m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: error handling 3rd m code
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
#if demo_control == 1
                 OR        m3fin_{{PATH}}        ;"3rd m-function finished"
#endif
                 AND       erm3co_{{PATH}}       ;"range error 3rd m code"
                 RST       erm3co_{{PATH}}       ;"range error 3rd m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}:  message M-CODE OUT OF RANGE
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: message M-CODE OUT OF RANGE
*)
#endif
                 RD        erm1co_{{PATH}}       ;"range error 1st m code"
                 OR        erm2co_{{PATH}}       ;"range error 2nd m code"
                 OR        erm3co_{{PATH}}       ;"range error 3rd m code"
                 WRT       M_NOK_{{PATH}}        ;"m-code out of range"

!! ---------------------------------------------------------------------------
!! {{PATH}}: m code table length (50 * 8 = 400 / M000 - M399)
!! (m_code_table_length bytes = M00 - M largest_m_code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: m code table length (50 * 8 = 400 / M000 - M399)
(m_code_table_length bytes = M00 - M largest_m_code)
*)
#endif
                 RD        rem1co_{{PATH}}       ;"re 1st m code active"
                 NUMEB
                           1
                           50
                           mctabl_{{PATH}}       ;"tab length for m code dec"

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the index pointer to the m code table (1st m code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the index pointer to the m code table
(1st m code)
*)
#endif
                 RD.NOT    LOG1                 ;"logic one"
                 RD.STK    m1cook_{{PATH}}       ;"impulse first m code ok"
                 DIVB
                           2
                           MFCS_{{PATH}}         ;"m-function code signal"
                           8
                           ptr1mc_{{PATH}}       ;"index ptr to 1st m code"
                 WRT       edivm1_{{PATH}}       ;"divsion error 1st m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: the division rest is used to decode the related bit 
!! of the 1st m code at the adress calculated by F10 DIVB 8
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: the division rest is used to decode the related bit 
of the 1st m code at the adress calculated by F10 DIVB 8
*)
#endif
                 RD        m1cook_{{PATH}}       ;"impulse first m code ok"
                 DECB
                           1
                           REST                 ;"calculation remainder"
                           0
                           dbit1m_{{PATH}}       ;"dec. bit 1st m code table"

!! ---------------------------------------------------------------------------
!! {{PATH}}: resetting the bit with the falling edge of m1code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: resetting the bit with the falling edge of m1code
*)
#endif
                 RD        fem1co_{{PATH}}       ;"fe 1st m code active"
                 OR        erm1co_{{PATH}}       ;"range error 1st m code"
                 NUMEB
                           1
                           0
                           dbit1m_{{PATH}}       ;"dec. bit 1st m code table"

!! ---------------------------------------------------------------------------
!! {{PATH}}: writing the byte with the decoded 1st m code into the m code table
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: writing the byte with the decoded 1st m code into the m code
table
*)
#endif
                 RD        m1cook_{{PATH}}       ;"impulse first m code ok"
                 OR        fem1co_{{PATH}}       ;"fe 1st m code active"
                 RD.STK.NOT LOG1                ;"logic one"
                 RD.STK    m1code_{{PATH}}       ;"1st m code is active"
                 OR        fem1co_{{PATH}}       ;"fe 1st m code active"
                 XMOVB
                           1
                           mctabl_{{PATH}}       ;"tab length for m code dec"
                           M000_007_{{PATH}}     ;"m codes M000 to M007"
                           dbit1m_{{PATH}}       ;"dec. bit 1st m code table"
                           ptr1mc_{{PATH}}       ;"index ptr to 1st m code"
                 WRT       exmwm1_{{PATH}}       ;"error writing first m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the index pointer to the m code table
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the index pointer to the m code table
(2nd m code)
*)
#endif
                 RD.NOT    LOG1                 ;"logic one"
                 RD.STK    m2cook_{{PATH}}       ;"impulse first m code ok"
                 DIVB
                           2
                           MF2CS_{{PATH}}        ;"2nd m function code signal"
                           8
                           ptr2mc_{{PATH}}       ;"index ptr to 2nd m code"
                 WRT       edivm2_{{PATH}}       ;"divsion error m code 2"

!! ---------------------------------------------------------------------------
!! {{PATH}}: the division rest is used to decode the related bit 
!! of the 2nd m code at the adress calculated by F14 DIVB 8
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: the division rest is used to decode the related bit 
of the 2nd m code at the adress calculated by F14 DIVB 8
*)
#endif
                 RD        m2cook_{{PATH}}       ;"impulse first m code ok"
                 DECB
                           1
                           REST                 ;"calculation remainder"
                           0
                           TMP_B00              ;"temorary byte 0"

!! ---------------------------------------------------------------------------
!! {{PATH}}: reading the byte from the m code table where the 2nd m code bit
!! must be written
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: reading the byte from the m code table where the 2nd m code bit
must be written
*)
#endif
                 RD.NOT    LOG1                 ;"logic one"
                 RD.STK.NOT LOG1                ;"logic one"
                 RD.STK    m2cook_{{PATH}}       ;"impulse first m code ok"
                 XMOVB
                           1
                           mctabl_{{PATH}}       ;"tab length for m code dec"
                           M000_007_{{PATH}}     ;"m codes M000 to M007"
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"
                           ptr2mc_{{PATH}}       ;"index ptr to 2nd m code"
                 WRT       exr1m2_{{PATH}}       ;"error reading 2nd m code"

                 RD        m2cook_{{PATH}}       ;"impulse first m code ok"
                 OR
                           1001
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"
                           TMP_B00              ;"temorary byte 0"
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"

                 RD        fem2co_{{PATH}}       ;"fe 2nd m code active"
                 OR        erm2co_{{PATH}}       ;"range error 2nd m code"
                 NUMEB     
                           1
                           0
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"

!! ---------------------------------------------------------------------------
!! {{PATH}}: writing the byte to the m code table where the 2nd m code bit
!! must be written
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: writing the byte to the m code table where the 2nd m code bit
must be written
*)
#endif
                 RD        m2cook_{{PATH}}       ;"impulse first m code ok"
                 OR        fem2co_{{PATH}}       ;"fe 2nd m code active"
                 RD.STK.NOT LOG1                ;"logic one"
                 RD.STK    m2code_{{PATH}}       ;"2nd m code is active"
                 OR        fem2co_{{PATH}}       ;"fe 2nd m code active"
                 XMOVB
                           1
                           mctabl_{{PATH}}       ;"tab length for m code dec"
                           M000_007_{{PATH}}     ;"m codes M000 to M007"
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"
                           ptr2mc_{{PATH}}       ;"index ptr to 2nd m code"
                 WRT       exmwm2_{{PATH}}       ;"error writing 2nd m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the index pointer to the m code table (3rd m code)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the index pointer to the m code table
(3rd m code)
*)
#endif
                 RD.NOT    LOG1                 ;"logic one"
                 RD.STK    m3cook_{{PATH}}       ;"impulse 3rd m code ok"
                 DIVB
                           2
                           MF3CS_{{PATH}}        ;"3rd m function code signal"
                           8
                           ptr3mc_{{PATH}}       ;"index ptr to 3rd m code"
                 WRT       edivm3_{{PATH}}       ;"divsion error m code 3"

!! ---------------------------------------------------------------------------
!! {{PATH}}: the division rest is used to decode the related bit 
!! of the 3rd m code at the adress calculated by F16 DIVB 8
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: the division rest is used to decode the related bit 
of the 3rd m code at the adress calculated by F16 DIVB 8
*)
#endif
                 RD        m3cook_{{PATH}}       ;"impulse 3rd m code ok"
                 DECB
                           1
                           REST                 ;"calculation remainder"
                           0
                           TMP_B00              ;"temorary byte 0"

!! ---------------------------------------------------------------------------
!! {{PATH}}: reading the byte from the m code table where the 3rd m code bit
!! must be written
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: reading the byte from the m code table where the 3rd m code bit
must be written
*)
#endif
                 RD.NOT    LOG1                 ;"logic one"
                 RD.STK.NOT LOG1                ;"logic one"
                 RD.STK    m3cook_{{PATH}}       ;"impulse 3rd m code ok"
                 XMOVB
                           1
                           mctabl_{{PATH}}       ;"tab length for m code dec"
                           M000_007_{{PATH}}     ;"m codes M000 to M007"
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"
                           ptr3mc_{{PATH}}       ;"index ptr to 3rd m code"
                 WRT       exr1m3_{{PATH}}       ;"error reading 3rd m code"

                 RD        m3cook_{{PATH}}       ;"impulse 3rd m code ok"
                 OR
                           1001
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"
                           TMP_B00              ;"temorary byte 0"
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"

                 RD        fem3co_{{PATH}}       ;"fe 3rd m code active"
                 OR        erm3co_{{PATH}}       ;"range error 3rd m code"
                 NUMEB
                           1
                           0
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"

!! ---------------------------------------------------------------------------
!! {{PATH}}: writing the byte to the m code table where the 3rd m code bit
!! must be written
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: writing the byte to the m code table where the 3rd m code bit
must be written
*)
#endif
                 RD        m3cook_{{PATH}}       ;"impulse 3rd m code ok"
                 OR        fem3co_{{PATH}}       ;"fe 3rd m code active"
                 RD.STK.NOT LOG1                ;"logic one"
                 RD.STK    m3code_{{PATH}}       ;"3rd m code is active"
                 OR        fem3co_{{PATH}}       ;"fe 3rd m code active"
                 XMOVB
                           1
                           mctabl_{{PATH}}       ;"tab length for m code dec"
                           M000_007_{{PATH}}     ;"m codes M000 to M007"
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"
                           ptr3mc_{{PATH}}       ;"index ptr to 3rd m code"
                 WRT       exmwm3_{{PATH}}       ;"error writing 3rd m code"

!! ---------------------------------------------------------------------------
!! {{PATH}}: waiting for the completition signal of the 1st m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: waiting for the completition signal of the 1st m code
*)
#endif
                 RD        m1code_{{PATH}}       ;"1st m code is active"
                 EQB
                           dbit1m_{{PATH}}       ;"dec. bit 1st m code table"
                           0
                 WRT       m1exec_{{PATH}}       ;"1st m-function executed"

                 RD        m1exec_{{PATH}}       ;"1st m-function executed"
                 AND.NOT   erm1co_{{PATH}}       ;"range error 1st m code"
#if demo_control == 1
                 OR        m1code_{{PATH}}       ;"1st m code is active"
#endif
                 WRT       m1fin_{{PATH}}        ;"1st m-function finished"

!! ---------------------------------------------------------------------------
!! {{PATH}}: waiting for the completition signal of the 2nd m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: waiting for the completition signal of the 2nd m code
*)
#endif
                 RD        m2code_{{PATH}}       ;"2nd m code is active"
                 EQB
                           dbit2m_{{PATH}}       ;"dec. bit 2nd m code table"
                           0
                 WRT       m2exec_{{PATH}}       ;"2nd m-function executed"

                 RD        m2exec_{{PATH}}       ;"2nd m-function executed"
                 AND.NOT   erm2co_{{PATH}}       ;"range error 2nd m code"
#if demo_control == 1
                 OR        m2code_{{PATH}}       ;"2nd m code is active"
#endif
                 WRT       m2fin_{{PATH}}        ;"2nd m-function finished"

!! ---------------------------------------------------------------------------
!! {{PATH}}: waiting for the completition signal of the 3rd m code
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: waiting for the completition signal of the 3rd m code
*)
#endif
                 RD        m3code_{{PATH}}       ;"3rd m code is active"
                 EQB
                           dbit3m_{{PATH}}       ;"dec. bit 3rd m code table"
                           0
                 WRT       m3exec_{{PATH}}       ;"3st m-function executed"

                 RD        m3exec_{{PATH}}       ;"3st m-function executed"
                 AND.NOT   erm3co_{{PATH}}       ;"range error 3rd m code"
#if demo_control == 1
                 OR        m3code_{{PATH}}       ;"3rd m code is active"
#endif
                 WRT       m3fin_{{PATH}}        ;"3st m-function finished"

!! ---------------------------------------------------------------------------
!! {{PATH}}: sending completition signal of the 1st m code to the cnc
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: sending completition signal of the 1st m code to the cnc
*)
#endif
                 RD        m1fin_{{PATH}}        ;"1st m-function finished"
                 AND       MF_{{PATH}}           ;"m-function strobe signal"
                 RD.STK    MFIN_{{PATH}}         ;"aux. funct. compl. signal"
                 AND.NOT   m1fin_{{PATH}}        ;"1st m-function finished"
                 OR.STK
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       MFIN_{{PATH}}         ;"aux. funct. compl. signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: sending completition signal of the 2nd m code to the cnc
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: sending completition signal of the 2nd m code to the cnc
*)
#endif
                 RD        m2fin_{{PATH}}        ;"2nd m-function finished"
                 AND       MF2_{{PATH}}          ;"2nd m function strobe"
                 RD.STK    MFIN2_{{PATH}}        ;"2nd m funct. compl. signal"
                 AND.NOT   m2fin_{{PATH}}        ;"2nd m-function finished"
                 OR.STK
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       MFIN2_{{PATH}}        ;"2nd m funct. compl. signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: sending completition signal of the 3rd m code to the cnc
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: sending completition signal of the 3rd m code to the cnc
*)
#endif
                 RD        m3fin_{{PATH}}        ;"3st m-function finished"
                 AND       MF3_{{PATH}}          ;"3rd m function strobe"
                 RD.STK    MFIN3_{{PATH}}        ;"3rd m funct. compl. signal"
                 AND.NOT   m3fin_{{PATH}}        ;"3st m-function finished"
                 OR.STK
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       MFIN3_{{PATH}}        ;"3rd m funct. compl. signal"
