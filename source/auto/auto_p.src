!!:--------------------------------------------------------------------------:
!!: File              : auto_{{PATH}}.src                                         :
!!: Creation date     : 29.11.2013                                           :
!!: Last modification : see table below                                      :
!!: Author            : FANUC FA Switzerland / Peter Bloesch                 :
!!: Description       : path specific automatic operation                    :
!!:--------------------------------------------------------------------------:
!!
!!:--------------------------------------------------------------------------:
!!:                     Modification                                         :
!!:--------------------------------------------------------------------------:
!!: Date   :Version: Sign  :Description                                      :
!!:--------------------------------------------------------------------------:
!!:04.07.17: 2.0.0 :Blp    :key message reset added                          :
!!:--------------------------------------------------------------------------:
!!:25.06.21: 3.0.0 :Blp    :virtual operator's panel added                   :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:

!! ===========================================================================
!! Code
!! ===========================================================================

!! ---------------------------------------------------------------------------
!! {{PATH}}: external reset
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: external reset
*)
#endif
                 RD        K_RST_{{PATH}}        ;"rst key"
                 WRT       ERS_{{PATH}}          ;"external reset signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: rising edge reset signal and signal for machine message reset
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: rising edge reset signal and signal for machine message reset
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 AND.NOT   m_rst_{{PATH}}        ;"memory reset"
                 WRT       RE_RST_{{PATH}}       ;"rising edge reset"

                 RD.NOT    RST_{{PATH}}          ;"resetting signal"
                 AND       m_rst_{{PATH}}        ;"memory reset"
                 WRT       FE_RST_{{PATH}}       ;"falling edge reset"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 WRT       m_rst_{{PATH}}        ;"memory reset"
#if start_address_op == 0 or handwheel_support == 2 or virtual_op_panel == 1
                 WRT       L_RST_{{PATH}}        ;"led rst key"
#endif
                 RD        B_RST_{{PATH}}        ;"button reset"
                 OR        K_RST_{{PATH}}        ;"reset key"
#if handwheel_support == 2
                 OR        K_MESRST_{{PATH}}     ;"message reset key"
#endif
                 WRT       MESRST_{{PATH}}       ;"message reset"

!! ---------------------------------------------------------------------------
!! {{PATH}}: conditions for cycle start disable
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: conditions for cycle start disable
*)
#endif
                 RD.NOT    INIT_F_{{PATH}}       ;"initialisation finished"
                 OR        WIN_WR               ;"window write active"
                 OR        SETUP_{{PATH}}        ;"set-up active"
                 OR.NOT    REF_OK_{{PATH}}       ;"all axis referenced"
                 OR.NOT    POW_OK_{{PATH}}       ;"power suply axis ok"
                 OR        AL_{{PATH}}           ;"alarm signal"
                 OR        M_1XXX_{{PATH}}       ;"emergency message active"
                 OR        RST_{{PATH}}          ;"resetting signal"
#if dcs_support == 1
   #if mcc_test == 1
                 OR        MCC_TEST             ;"mcc test running"
   #endif
   #if brake_test == 1
                 OR        BRK_TEST             ;"brake test active"
   #endif
#endif
                 WRT       st_dis_{{PATH}}       ;"program start disable"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable ST_EN_{{PATH}} (cycle start enable)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable ST_EN_{{PATH}} (cycle start enable)
*)
#endif
                 RD        M_AUTO_{{PATH}}       ;"automatic mode active"
                 AND.NOT   st_dis_{{PATH}}       ;"program start disable"
                 WRT       ST_EN_{{PATH}}        ;"program start enable"

                 RD        K_ST_{{PATH}}         ;"key cycle start"
                 AND       M_AUTO_{{PATH}}       ;"automatic mode active"
                 AND       st_dis_{{PATH}}       ;"program start disable"
                 WRT       M_STDIS_{{PATH}}      ;"message start disable"

!! ---------------------------------------------------------------------------
!! {{PATH}}: cycle start
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: cycle start
*)
#endif
                 RD        K_ST_{{PATH}}         ;"key cycle start"
                 AND.NOT   M_KST_{{PATH}}        ;"memory key cycle start"
                 WRT       RE_KST_{{PATH}}       ;"re key cycle start"

                 RD        K_ST_{{PATH}}         ;"key cycle start"
                 WRT       M_KST_{{PATH}}        ;"memory key cycle start"

                 RD        K_ST_{{PATH}}         ;"key cycle start"
                 AND       ST_EN_{{PATH}}        ;"program start enable"
   #if nbr_of_path > 1
                 AND.NOT   SYNST                ;"synchronous start"
                 OR        SYNST                ;"synchronous start"
   #endif
                 WRT       ST_{{PATH}}           ;"cycle start signal"

                 RD        STL_{{PATH}}          ;"cycle start lamp signal"
#if ref_dir_1st_axis_{{PATH}} > -1
                 OR        AUTREF_{{PATH}}       ;"automatic zero return"
#endif
                 WRT       L_STL_{{PATH}}        ;"led cycle start lamp"

!! ---------------------------------------------------------------------------
!! {{PATH}}: cycle stop (feed hold)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: cycle stop (feed hold)
*)
#endif
                 RD        K_CYSP_{{PATH}}       ;"key cycle stop"
                 OR        M000_{{PATH}}         ;"stop program run"
                 OR.NOT    POW_OK_{{PATH}}       ;"power suply axis ok"
                 OR        M_1XXX_{{PATH}}       ;"emergency message active"
                 RD.STK    O_STOP_{{PATH}}       ;"optional stop m01 active"
                 AND       M001_{{PATH}}         ;"optional stop"
                 OR.STK
                 WRT.NOT   *SP_{{PATH}}          ;"feed hold signal"

                 RD        SPL_{{PATH}}          ;"feed hold lamp signal"
                 WRT       L_SPL_{{PATH}}        ;"led cycle stop"

!! ---------------------------------------------------------------------------
!! {{PATH}}: cutting block start interlock (parameter 3004 bit 0 (BSL) = 1)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: cutting block start interlock
(parameter 3004 bit 0 (BSL) = 1)
*)
#endif
                 RD        LOG1                 ;"logic one"
                 WRT       *CSL_{{PATH}}         ;"cutting block lock"

!! ---------------------------------------------------------------------------
!! {{PATH}}: block start interlock signal (parameter 3004 bit 0 (BSL) = 1)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: block start interlock signal
(parameter 3004 bit 0 (BSL) = 1)
*)
#endif
                 RD        LOG1                 ;"logic one"
                 WRT       *BSL_{{PATH}}         ;"block start lock signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: end of program (m02/m30 reset and rewind)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: end of program (m02/m30 reset and rewind)
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 AND       RRW_{{PATH}}          ;"reset and rewind signal"
                 WRT       rrwact_{{PATH}}       ;"reset and rewind active"

                 RD        M_AUTO_{{PATH}}       ;"automatic mode active"
                 AND       RE_RST_{{PATH}}       ;"rising edge reset"
                 RD.STK    FEPGMT_{{PATH}}       ;"falling edge program test"
                 AND       PGMRUN_{{PATH}}       ;"program running"
                 OR.STK    
                 OR        M002_{{PATH}}         ;"end of program"
                 OR        M030_{{PATH}}         ;"end of program"
                 OR        delrrw_{{PATH}}       ;"delay for rrw signal"
                 AND.NOT   rrwact_{{PATH}}       ;"reset and rewind active"
                 WRT       delrrw_{{PATH}}       ;"delay for rrw signal"

                 RD        delrrw_{{PATH}}       ;"delay for rrw signal"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       RRW_{{PATH}}          ;"reset and rewind signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable PGMRUN_{{PATH}} (program running)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable PGMRUN_{{PATH}} (program running)
*)
#endif
                 RD        M_MEM_{{PATH}}        ;"mode mem selected"
                 OR        M_DNC_{{PATH}}        ;"mode dnc selected"
                 AND       STL_{{PATH}}          ;"cycle start lamp signal"
                 RD.STK    M_MEM_{{PATH}}        ;"mode mem selected"
                 OR        M_DNC_{{PATH}}        ;"mode dnc selected"
                 AND       PGMRUN_{{PATH}}       ;"program running"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 OR.STK
                 WRT       PGMRUN_{{PATH}}       ;"program running"


!! ---------------------------------------------------------------------------
!! {{PATH}}: led program stop
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: led program stop
*)
#endif
                 RD        STL_{{PATH}}          ;"cycle start lamp signal"
                 AND.NOT   m_stl_{{PATH}}        ;"memory stl signal"
                 WRT       re_stl_{{PATH}}       ;"re stl signal"

                 RD        STL_{{PATH}}          ;"cycle start lamp signal"
                 WRT       m_stl_{{PATH}}        ;"memory stl signal"

                 RD        M000_{{PATH}}         ;"stop program run"
                 RD.STK    L_PGSP_{{PATH}}       ;"led program stop"
                 AND.NOT   re_stl_{{PATH}}       ;"re stl signal"
                 OR.STK
                 AND       PGMRUN_{{PATH}}       ;"program running"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       L_PGSP_{{PATH}}       ;"led program stop"

!! ---------------------------------------------------------------------------
!! {{PATH}}: management of m00, m01, m02, m30, m198
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: management of m00, m01, m02, m30, m198
*)
#endif
                 RD        M000_{{PATH}}         ;"stop program run"
                 AND       SPL_{{PATH}}          ;"feed hold lamp signal"
                 RST       M000_{{PATH}}         ;"stop program run"

                 RD        O_STOP_{{PATH}}       ;"optional stop m01 active"
                 AND       SPL_{{PATH}}          ;"feed hold lamp signal"
                 OR.NOT    O_STOP_{{PATH}}       ;"optional stop m01 active"
                 AND       M001_{{PATH}}         ;"optional stop"
                 RST       M001_{{PATH}}         ;"optional stop"

                 RD        M002_{{PATH}}         ;"end of program"
                 AND       RRW_{{PATH}}          ;"reset and rewind signal"
                 RST       M002_{{PATH}}         ;"end of program"

                 RD        M030_{{PATH}}         ;"end of program"
                 AND       RRW_{{PATH}}          ;"reset and rewind signal"
                 RST       M030_{{PATH}}         ;"end of program"

                 RD        M198_{{PATH}}         ;"External subprogram call"
                 RST       M198_{{PATH}}         ;"External subprogram call"
