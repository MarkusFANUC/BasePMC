!!:--------------------------------------------------------------------------:
!!: File              : s_ana2_{{PATH}}.src                                       :
!!: Creation date     : 16.09.2013                                           :
!!: Last modification : see table below                                      :
!!: Author            : FANUC FA Switzerland / Peter Bloesch                 :
!!: Description       : analog spindle using analog output module ADA02A     :
!!:--------------------------------------------------------------------------:
!!
!!:--------------------------------------------------------------------------:
!!:                     Modification                                         :
!!:--------------------------------------------------------------------------:
!!: Date   :Version: Sign  :Description                                      :
!!:--------------------------------------------------------------------------:
!!:31.07.18: 2.0.0 :Blp    :sr_sar_{{PATH}} was written in upper case         :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:

!! ===========================================================================
!! Code
!! ===========================================================================

!! ---------------------------------------------------------------------------
!! {{PATH}}: this module manages an analog spindle
!! (12bit analog output module ADA02A)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: this module manages an analog spindle.
(12bit analog output module ADA02A)
*)
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: moving the programmed spindle speed into the temporary variables
!! for further calculations
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: moving the programmed spindle speed into the temporary
variables for further calculations
*)
#endif
                 RD        LOG1                 ;"logic one"
                 MOVD
                           S00-S31_{{PATH}}      ;"spindle speed code"
                           TMP_B00              ;"temporary byte 00"

!! ---------------------------------------------------------------------------
!! {{PATH}}: comparison of programmed and maximal spindle speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: comparison of programmed and maximal spindle speed
*)
#endif
                 RD        LOG1                 ;"logic one"
                 LED
                           TMP_B00              ;"temporary byte 00"
                           MAX_SP_{{PATH}}       ;"maximal spindle speed"
                 WRT       pgspok_{{PATH}}       ;"prog. spindle speed ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}: if the programmed speed is to high, the speed will be clamped
!! to the maximal allowed speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: if the programmed speed is to high, the speed will be
clamped to the maximal allowed speed
*)
#endif
                 RD.NOT    pgspok_{{PATH}}       ;"prog. spindle speed ok"
                 MOVD
                           MAX_SP_{{PATH}}       ;"maximal spindle speed"
                           TMP_B00              ;"temporary byte 00"

                 RD.NOT    pgspok_{{PATH}}       ;"prog. spindle speed ok"
                 AND.NOT   M_1XXX_{{PATH}}       ;"emergency message active"
                 AND       POW_OK_{{PATH}}       ;"power suply axis ok"
                 WRT       SP_S_NOK_{{PATH}}     ;"spindle speed not ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}: initialisation of temporary variables (4 bytes)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: initialisation of temporary variables (4 bytes)
*)
#endif
                 RD        LOG1                 ;"logic one"
                 NUMEB
                           4
                           0
                           TMP_B04              ;"temporary byte 04"

!! ---------------------------------------------------------------------------
!! {{PATH}}: multiplication of the spindle speed with the spindle override
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: multiplication of the spindle speed with the spindle
override
*)
#endif
                 RD        LOG1                 ;"logic one"
                 MOVB
                           SOV_{{PATH}}          ;"spindle speed ovr signal"
                           TMP_B04              ;"temporary byte 04"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB
                           1004
                           TMP_B00              ;"temporary byte 00"
                           TMP_B04              ;"temporary byte 04"
                           TMP_B00              ;"temporary byte 00"
                 WRT       emuspov_{{PATH}}      ;"multipl. err spindle ovr."

                 RD        RST_{{PATH}}                  ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB
                           4
                           TMP_B00              ;"temporary byte 00"
                           100
                           TMP_B00              ;"temporary byte 00"
                 WRT       edispov_{{PATH}}      ;"division err spindle ovr."

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the output value for the analog output
!! 2000 * prog. spindle speed / max. allowed speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the output value for the analog output
2000 * prog. spindle speed / max. allowed speed
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB
                           4
                           TMP_B00              ;"temporary byte 00"
                           2000
                           TMP_B00              ;"temporary byte 00"
                 WRT       emusps_{{PATH}}       ;"multipl. err spindle speed"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB
                           1004
                           TMP_B00              ;"temporary byte 00"
                           MAX_SP_{{PATH}}       ;"maximal spindle speed"
                           TMP_B00              ;"temporary byte 00"
                 WRT       edisps_{{PATH}}       ;"division err spindle speed"

!! ---------------------------------------------------------------------------
!! {{PATH}}: if the value is greater than 2000 the value will be clamped to
!! 2000
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: if the value is greater than 2000 the value will be clamped
to 2000
*)
#endif
                 RD        LOG1                 ;"logic one"
                 LED
                           2000
                           TMP_B00              ;"temporary byte 00"
                 WRT       maxsdr_{{PATH}}       ;"max. spindle speed reached"

                 RD        maxsdr_{{PATH}}       ;"max. spindle speed reached"
                 NUMEB
                           4
                           2000
                           TMP_B00              ;"temporary byte 00"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable: SP_RUN_{{PATH}} (spindle turning)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable: SP_RUN (spindle turning)
*)
#endif
                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 OR        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 WRT       SP_RUN_{{PATH}}       ;"spindle is turning"

!! ---------------------------------------------------------------------------
!! {{PATH}}: impulse to restart the timer for the speed arrival signal
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: impulse to restart the timer for the speed arrival signal
*)
#endif
                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 AND       sp_neg_{{PATH}}       ;"memory sp negative dir."
                 RD.STK    SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND.NOT   sp_neg_{{PATH}}       ;"memory sp negative dir."
                 OR.STK
                 OR        RE_SCH_{{PATH}}       ;"rising edge speed change"
                 WRT       sr_sar_{{PATH}}       ;"restart timer for sp_sar"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle rotation direction memory
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle rotation direction memory
*)
#endif
                 RD        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 RD.STK    sp_neg_{{PATH}}       ;"memory sp negative dir."
                 AND.NOT   SP_CW_{{PATH}}        ;"spindle start cw"
                 OR.STK
                 WRT       sp_neg_{{PATH}}       ;"memory sp negative dir."

!! ---------------------------------------------------------------------------
!! {{PATH}}: for the CCW direction a negative value will be output
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: for the CCW direction a negative value will be output
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    sp_neg_{{PATH}}       ;"memory sp negative dir."
                 MULB      
                           4
                           TMP_B00              ;"temporary byte 00"
                           -1
                           TMP_B00              ;"temporary byte 00"
                 WRT       emuspd_{{PATH}}       ;"multipl. error sp direct."


!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable: SP_SAR_{{PATH}} (spindle speed arrival)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable: SP_SAR_{{PATH}} (spindle speed arrival)
*)
#endif
                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
                 AND.NOT   sr_sar_{{PATH}}       ;"restart timer for sp_sar"
                 TMR       __TMR__1
                 WRT       SP_SAR_{{PATH}}       ;"spindle speed arrival"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable: SP_STP_{{PATH}} (spindle stopped)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable: SP_STP_{{PATH}} (spindle stopped)
*)
#endif
                 RD.NOT    SP_RUN_{{PATH}}       ;"spindle is turning"
                 TMR       __TMR__2
                 WRT       SP_STP_{{PATH}}       ;"spindle stopped"

!! ---------------------------------------------------------------------------
!! {{PATH}}: when stopping the spindle the output value must be 0
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: when stopping the spindle the output value must be 0
*)
#endif
                 RD.NOT    SP_RUN_{{PATH}}       ;"spindle is turning"
                 NUMEB
                           4
                           0
                           TMP_B00              ;"temporary byte 00"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle motor speed command 12bit
!! replace TMP_B04 with the real analog output Yxxx
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle motor speed command 12bit
replace TMP_B04 with the real analog output Yxxx
*)
#endif
                 RD        LOG1                 ;"logic one"
                 AND
                           2
                           TMP_B00              ;"temporary byte 00"
                           4095
                           TMP_B04              ;"temporary byte 04"
