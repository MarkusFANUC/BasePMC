!!:--------------------------------------------------------------------------:
!!: File              : s_pmc_{{PATH}}.src                                        :
!!: Creation date     : 16.09.2013                                           :
!!: Last modification : see table below                                      :
!!: Author            : FANUC FA Switzerland / Peter Bloesch                 :
!!: Description       : PMC axis used as a spindle                           :
!!:--------------------------------------------------------------------------:
!!
!!:--------------------------------------------------------------------------:
!!:                     Modification                                         :
!!:--------------------------------------------------------------------------:
!!: Date   :Version: Sign  :Description                                      :
!!:--------------------------------------------------------------------------:
!!:24.07.18: 2.0.0 :Blp    :PMC axis control signals for path 11-15 added    :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:

!! ===========================================================================
!! Code
!! ===========================================================================

!! ---------------------------------------------------------------------------
!! {{PATH}}: this module manages the xth servo axis as a spindle
!! (axis controlby pmc)
!! ---------------------------------------------------------------------------
#if net_comment == 1
   #if spindle_sv_axis_{{PATH}} == 1
(*
{{PATH}}: this module manages the 1st servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 2
(*
{{PATH}}: this module manages the 2nd servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 3
(*
{{PATH}}: this module manages the 3rd servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 4
(*
{{PATH}}: this module manages the 4th servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 5
(*
{{PATH}}: this module manages the 5th servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 6
(*
{{PATH}}: this module manages the 6th servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 7
(*
{{PATH}}: this module manages the 7th servo axis as a spindle
(axis control by pmc).
*)
   #endif
   #if spindle_sv_axis_{{PATH}} == 8
(*
{{PATH}}: this module manages the 8th servo axis as a spindle
(axis control by pmc).
*)
   #endif
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: moving the programmed spindle speed into the temporary variables
!! for further calculations
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: moving the programmed spindle speed into the temporary
variables for further calculations
*)
#endif
                 RD        LOG1                 ;"logic one"
                 MOVD
                           S00-S31_{{PATH}}      ;"spindle speed code"
                           TMP_B00              ;"temporary byte 00"

!! ---------------------------------------------------------------------------
!! {{PATH}}: comparison of programmed and maximal spindle speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: comparison of programmed and maximal spindle speed
*)
#endif
                 RD        LOG1                 ;"logic one"
                 LED
                           TMP_B00              ;"temporary byte 00"
                           MAX_SP_{{PATH}}       ;"maximal spindle speed"
                 WRT       pgspok_{{PATH}}       ;"prog. spindle speed ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}: if the programmed speed is to high, the speed will be clamped
!! to the maximal allowed speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: if the programmed speed is to high, the speed will be
clamped to the maximal allowed speed
*)
#endif
                 RD.NOT    pgspok_{{PATH}}       ;"prog. spindle speed ok"
                 MOVD
                           MAX_SP_{{PATH}}       ;"maximal spindle speed"
                           TMP_B00              ;"temporary byte 00"

                 RD.NOT    pgspok_{{PATH}}       ;"prog. spindle speed ok"
                 AND.NOT   M_1XXX_{{PATH}}       ;"emergency message active"
                 AND       POW_OK_{{PATH}}       ;"power suply axis ok"
                 WRT       SP_S_NOK_{{PATH}}     ;"spindle speed not ok"

!! ---------------------------------------------------------------------------
!! {{PATH}}: initialisation of temporary variables (4 bytes)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: initialisation of temporary variables (4 bytes)
*)
#endif
                 RD        LOG1                 ;"logic one"
                 NUMEB
                           4
                           0
                           TMP_B04              ;"temporary byte 04"

!! ---------------------------------------------------------------------------
!! {{PATH}}: multiplication of the spindle speed with the spindle override
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: multiplication of the spindle speed with the spindle
override
*)
#endif
                 RD        LOG1                 ;"logic one"
                 MOVB
                           SOV_{{PATH}}          ;"spindle speed ovr signal"
                           TMP_B04              ;"temporary byte 04"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB
                           1004
                           TMP_B00              ;"temporary byte 00"
                           TMP_B04              ;"temporary byte 04"
                           TMP_B00              ;"temporary byte 00"
                 WRT       emuspov_{{PATH}}      ;"multipl. err spindle ovr."

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB
                           4
                           TMP_B00              ;"temporary byte 00"
                           100
                           TMP_B00              ;"temporary byte 00"
                 WRT       edispov_{{PATH}}      ;"division err spindle ovr."

#if dcs_support == 1
!! ---------------------------------------------------------------------------
!! {{PATH}}: checking max. setup speed
!! ---------------------------------------------------------------------------
   #if net_comment == 1
(*
{{PATH}}: checking max. setup speed
*)
   #endif
                 RD.NOT    *SGOPN               ;"guard state doors closed"
                 GTD       
                           TMP_B00              ;"temporary byte 00"
                           MAX_SPSET_{{PATH}}    ;"max spindle setup speed"
                 WRT       sp_mset_{{PATH}}      ;"max. spind. setup speed"

                 RD        sp_mset_{{PATH}}      ;"max. spind. setup speed"
                 MOVD      
                           MAX_SPSET_{{PATH}}    ;"max spindle setup speed"
                           TMP_B00              ;"temporary byte 00"
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the gear ratio 
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the gear ratio
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB
                           1004
                           TMP_B00              ;"temporary byte 00"
                           gr_mot_{{PATH}}       ;"gear ratio motor"
                           TMP_B00              ;"temporary byte 00"
                 WRT       emusps_{{PATH}}       ;"multipl. err spindle speed"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB
                           1004
                           TMP_B00              ;"temporary byte 00"
                           gr_spi_{{PATH}}       ;"gear ratio spindle"
                           TMP_B00              ;"temporary byte 00"
                 WRT       edisps_{{PATH}}       ;"division err spindle speed"

!! ---------------------------------------------------------------------------
!! If motor speed is higher than max. allowed motor speed, the speed will 
!! be clamped to max. motor speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: If motor speed is higher than max. allowed motor speed,
the speed will be clamped to max. motor speed
*)
#endif
                 RD        LOG1                 ;"logic one"
                 LED
                           MAX_MOT_{{PATH}}      ;"maximal motor speed"
                           TMP_B00              ;"temporary byte 00"
                 WRT       maxsdr_{{PATH}}       ;"max. spindle speed reached"

                 RD        maxsdr_{{PATH}}       ;"max. spindle speed reached"
                 MOVD
                           MAX_MOT_{{PATH}}      ;"maximal motor speed"
                           TMP_B00              ;"temporary byte 00"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable: SP_RUN (spindle turning)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable: SP_RUN (spindle turning)
*)
#endif
                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 OR        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 WRT       SP_RUN_{{PATH}}       ;"spindle is turning"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable SP_STP (spindle stopped)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable SP_STP (spindle stopped)
*)
#endif

#if spindle_sv_axis_{{PATH}} == 1
                 RD        INP1_{{PATH}}         ;"1st axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 RD        INP2_{{PATH}}         ;"2nd axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 RD        INP3_{{PATH}}         ;"3rd axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 RD        INP4_{{PATH}}         ;"4th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 RD        INP5_{{PATH}}         ;"5th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 RD        INP6_{{PATH}}         ;"6th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 RD        INP7_{{PATH}}         ;"7th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 RD        INP8_{{PATH}}         ;"8th axis in-pos. signal"
#endif
#if demo_control == 1
                 OR        LOG1                 ;"logic one"
#endif
                 OR        SP_STP_{{PATH}}       ;"spindle stopped"
                 AND.NOT   SP_RUN_{{PATH}}       ;"spindle is turning"
#if spindle_sv_axis_{{PATH}} == 1
                 AND.NOT   EAX1_{{PATH}}         ;"1st axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 AND.NOT   EAX2_{{PATH}}         ;"2nd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 AND.NOT   EAX3_{{PATH}}         ;"3rd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 AND.NOT   EAX4_{{PATH}}         ;"4th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 AND.NOT   EAX5_{{PATH}}         ;"5th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 AND.NOT   EAX6_{{PATH}}         ;"6th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 AND.NOT   EAX7_{{PATH}}         ;"7th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 AND.NOT   EAX8_{{PATH}}         ;"8th axis is pmc axis"
#endif

                 WRT       SP_STP_{{PATH}}       ;"spindle stopped"

!! ---------------------------------------------------------------------------
!! {{PATH}}: impulse to restart the timer for the speed arrival signal
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: impulse to restart the timer for the speed arrival signal
*)
#endif
                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 AND       sp_neg_{{PATH}}       ;"memory sp negative dir."
                 RD.STK    SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND.NOT   sp_neg_{{PATH}}       ;"memory sp negative dir."
                 OR.STK
                 OR        RE_SCH_{{PATH}}       ;"rising edge speed change"
                 WRT       sr_sar_{{PATH}}       ;"restart timer for sp_sar"

                 RD        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 RD.STK    sp_neg_{{PATH}}       ;"memory sp negative dir."
                 AND.NOT   SP_CW_{{PATH}}        ;"spindle start cw"
                 OR.STK
                 WRT       sp_neg_{{PATH}}       ;"memory sp negative dir."

!! ---------------------------------------------------------------------------
!! {{PATH}}: reading the actual motor speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: reading the actual motor speed
*)
#endif
                 RD        LOG1                 ;"logic one"
                 NUMEB     
                           2
                           {{ADDR}}207
                           sspeed_{{PATH}}       ;"reading acutal motor speed"

                 RD        LOG1                 ;"logic one"
                 NUMEB     
                           2
                           4
                           dl_spsd_{{PATH}}      ;"data length motor speed"

                 RD        LOG1                 ;"logic one"
                 NUMEB     
                           2
                           11
                           dn_spsd_{{PATH}}      ;"data number motor speed"

                 RD        LOG1                 ;"logic one"
                 NUMEB     
                           2
#if spindle_sv_axis_{{PATH}} == 1
                           1
#endif
#if spindle_sv_axis_{{PATH}} == 2
                           2
#endif
#if spindle_sv_axis_{{PATH}} == 3
                           3
#endif
#if spindle_sv_axis_{{PATH}} == 4
                           4
#endif
#if spindle_sv_axis_{{PATH}} == 5
                           5
#endif
#if spindle_sv_axis_{{PATH}} == 6
                           6
#endif
#if spindle_sv_axis_{{PATH}} == 7
                           7
#endif
#if spindle_sv_axis_{{PATH}} == 8
                           8
#endif
                           ax_spsd_{{PATH}}      ;"axis number motor speed"

                 RD        LOG1                 ;"logic one"
                 WINDR
                           sspeed_{{PATH}}       ;"reading acutal motor speed"
                 WRT       e_spsp_{{PATH}}       ;"reading motor speed exec"

!! ---------------------------------------------------------------------------
!! {{PATH}}: calculation of the absolute value of the motor speed
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: calculation of the absolute value of the actual motor speed
*)
#endif

                 RD        LOG1                 ;"logic one"
                 MOVD
                           speed_s_{{PATH}}      ;"actual motor speed"
                           TMP_B04              ;"temporary byte 04"

                 RD        LOG1                 ;"logic one"
                 LTD       
                           TMP_B04              ;"temporary byte 04"
                           0
                 WRT       sp_mindir_{{PATH}}    ;"motor minus direction"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    sp_mindir_{{PATH}}    ;"motor minus direction"
                 MULB
                           4
                           TMP_B04              ;"temporary byte 04"
                           -1
                           TMP_B04              ;"temporary byte 04"
                 WRT       emusps1_{{PATH}}      ;"multipl. err spindle speed"


!! ---------------------------------------------------------------------------
!! {{PATH}}: when the motor speed reaches 90% of the programmed speed, the 
!! timer for  the speed arrival signal will be activated
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: when the motor speed reaches 90% of the programmed speed,
the timer for  the speed arrival signal will be activated
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    SP_RUN_{{PATH}}       ;"spindle is turning"
                 MULB
                           4
                           TMP_B00              ;"temporary byte 00"
                           90
                           TMP_B08              ;"temporary byte 08"
                 WRT       emusps_{{PATH}}       ;"multipl. err spindle speed"

                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    SP_RUN_{{PATH}}       ;"spindle is turning"
                 DIVB
                           4
                           TMP_B08              ;"temporary byte 08"
                           100
                           TMP_B08              ;"temporary byte 08"
                 WRT       edisps_{{PATH}}       ;"division err spindle speed"

                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
                 GED       
                           TMP_B04              ;"temporary byte 04"
                           TMP_B08              ;"temporary byte 08"
                 WRT       sp_ok_{{PATH}}        ;"spindle speed reached"


                 RD        sp_ok_{{PATH}}        ;"spindle speed reached"
#if demo_control == 1
                 OR        LOG1                 ;"logic one"
#endif
                 AND       SP_RUN_{{PATH}}       ;"spindle is turning"
                 AND.NOT   sr_sar_{{PATH}}       ;"restart timer for sp_sar"
                 TMRB
                           0
                           200
                 WRT       SP_SAR_{{PATH}}       ;"spindle speed arrival"

!! ---------------------------------------------------------------------------
!! {{PATH}}: pmc axis control: speed command 10hex
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: pmc axis control: speed command 10hex
*)
#endif
                 RD        LOG1                 ;"logic one"
                 NUMEB
                           1
                           0
                           s_pmc00_{{PATH}}      ;"start addr. pmc axis ctrl"

                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
                 NUMEB
                           1
                           16
                           s_pmc01_{{PATH}}      ;"ctrl cmd pmc axis control"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle start clockwise
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle start clockwise
*)
#endif
                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 MOVW
                           TMP_B00              ;"temporary byte 00"
                           s_pmc02_{{PATH}}      ;"sv motor speed"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle start counterclockwise
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle start counterclockwise
*)
#endif
                 RD        RST_{{PATH}}          ;"resetting signal"
                 RD.STK    SP_CCW_{{PATH}}       ;"spindle start ccw"
                 MULB
                           2
                           TMP_B00              ;"temporary byte 00"
                           -1
                           s_pmc02_{{PATH}}      ;"sv motor speed"
                 WRT       emusps_{{PATH}}       ;"multipl. err spindle speed"

                 RD.NOT    SP_RUN_{{PATH}}       ;"spindle is turning"
                 AND       mSP_RUN_{{PATH}}      ;"memory spindle run"
                 WRT       fesprn_{{PATH}}       ;"falling edge spindle run"

                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
                 WRT       mSP_RUN_{{PATH}}      ;"memory spindle run"

                 RD        RE_RST_{{PATH}}       ;"rising edge reset"
                 OR        fesprn_{{PATH}}       ;"falling edge spindle run"
                 RD.STK    SP_RUN_{{PATH}}       ;"spindle is turning"
#if spindle_sv_axis_{{PATH}} == 1
                 AND       EAX1_{{PATH}}         ;"1st axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 AND       EAX2_{{PATH}}         ;"2nd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 AND       EAX3_{{PATH}}         ;"3rd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 AND       EAX4_{{PATH}}         ;"4th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 AND       EAX5_{{PATH}}         ;"5th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 AND       EAX6_{{PATH}}         ;"6th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 AND       EAX7_{{PATH}}         ;"7th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 AND       EAX8_{{PATH}}         ;"8th axis is pmc axis"
#endif
                 AND.NOT   e_spax_{{PATH}}       ;"command spindle axis exec"
                 AXCTL
#if {{ADDR}} < 10
                           {{ADDR}}001
#endif
#if {{ADDR}} == 10
                           5002
#endif
#if {{ADDR}} == 11
                           6002
#endif
#if {{ADDR}} == 12
                           7002
#endif
#if {{ADDR}} == 13
                           8002
#endif
#if {{ADDR}} == 14
                           9002
#endif
                           s_pmc00_{{PATH}}      ;"start addr. pmc axis ctrl"
                 WRT       e_spax_{{PATH}}       ;"command spindle axis exec"

!! ---------------------------------------------------------------------------
!! {{PATH}}: switching axis to pmc axis control
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: switching axis to pmc axis control
*)
#endif
                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
#if spindle_sv_axis_{{PATH}} == 1
                 AND.NOT   EACNT1_{{PATH}}       ;"1st axis sel. status sig."
                 AND.NOT   MV1_{{PATH}}          ;"1st axis moving signal"
                 AND       INP1_{{PATH}}         ;"1st axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 AND.NOT   EACNT2_{{PATH}}       ;"2nd axis sel. status sig."
                 AND.NOT   MV2_{{PATH}}          ;"2nd axis moving signal"
                 AND       INP2_{{PATH}}         ;"2nd axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 AND.NOT   EACNT3_{{PATH}}       ;"3rd axis sel. status sig."
                 AND.NOT   MV3_{{PATH}}          ;"3rd axis moving signal"
                 AND       INP3_{{PATH}}         ;"3rd axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 AND.NOT   EACNT4_{{PATH}}       ;"4th axis sel. status sig."
                 AND.NOT   MV4_{{PATH}}          ;"4th axis moving signal"
                 AND       INP4_{{PATH}}         ;"4th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 AND.NOT   EACNT5_{{PATH}}       ;"5th axis sel. status sig."
                 AND.NOT   MV5_{{PATH}}          ;"5th axis moving signal"
                 AND       INP5_{{PATH}}         ;"5th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 AND.NOT   EACNT6_{{PATH}}       ;"5th axis sel. status sig."
                 AND.NOT   MV6_{{PATH}}          ;"6th axis moving signal"
                 AND       INP6_{{PATH}}         ;"6th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 AND.NOT   EACNT7_{{PATH}}       ;"7th axis sel. status sig."
                 AND.NOT   MV7_{{PATH}}          ;"7th axis moving signal"
                 AND       INP7_{{PATH}}         ;"7th axis in-pos. signal"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 AND.NOT   EACNT8_{{PATH}}       ;"8th axis sel. status sig."
                 AND.NOT   MV8_{{PATH}}          ;"8th axis moving signal"
                 AND       INP8_{{PATH}}         ;"8th axis in-pos. signal"
#endif
                 RD.STK    SP_RUN_{{PATH}}       ;"spindle is turning"
#if spindle_sv_axis_{{PATH}} == 1
                 OR        EACNT1_{{PATH}}       ;"1st axis sel. status sig."
                 AND       EAX1_{{PATH}}         ;"1st axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 OR        EACNT2_{{PATH}}       ;"2nd axis sel. status sig."
                 AND       EAX2_{{PATH}}         ;"2nd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 OR        EACNT3_{{PATH}}       ;"3rd axis sel. status sig."
                 AND       EAX3_{{PATH}}         ;"3rd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 OR        EACNT4_{{PATH}}       ;"4th axis sel. status sig."
                 AND       EAX4_{{PATH}}         ;"4th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 OR        EACNT5_{{PATH}}       ;"5th axis sel. status sig."
                 AND       EAX5_{{PATH}}         ;"5th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 OR        EACNT6_{{PATH}}       ;"5th axis sel. status sig."
                 AND       EAX6_{{PATH}}         ;"6th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 OR        EACNT7_{{PATH}}       ;"7th axis sel. status sig."
                 AND       EAX7_{{PATH}}         ;"7th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 OR        EACNT8_{{PATH}}       ;"8th axis sel. status sig."
                 AND       EAX8_{{PATH}}         ;"8th axis is pmc axis"
#endif
                 OR.STK
#if spindle_sv_axis_{{PATH}} == 1
                 WRT       EAX1_{{PATH}}         ;"1st axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 WRT       EAX2_{{PATH}}         ;"2nd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 WRT       EAX3_{{PATH}}         ;"3rd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 WRT       EAX4_{{PATH}}         ;"4th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 WRT       EAX5_{{PATH}}         ;"5th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 WRT       EAX6_{{PATH}}         ;"6th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 WRT       EAX7_{{PATH}}         ;"7th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 WRT       EAX8_{{PATH}}         ;"8th axis is pmc axis"
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: servo off in PMC axis control
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: servo off in PMC axis control
*)
#endif

#if spindle_sv_axis_{{PATH}} == 1
                 RD        EAX1_{{PATH}}         ;"1st axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 2
                 RD        EAX2_{{PATH}}         ;"2nd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 3
                 RD        EAX3_{{PATH}}         ;"3rd axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 4
                 RD        EAX4_{{PATH}}         ;"4th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 5
                 RD        EAX5_{{PATH}}         ;"5th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 6
                 RD        EAX6_{{PATH}}         ;"6th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 7
                 RD        EAX7_{{PATH}}         ;"7th axis is pmc axis"
#endif
#if spindle_sv_axis_{{PATH}} == 8
                 RD        EAX8_{{PATH}}         ;"8th axis is pmc axis"
#endif
                 AND.NOT   POW_OK_{{PATH}}       ;"power supply axis ok"

#if {{ADDR}} < 10 
                 WRT       ESOFA_{{PATH}}        ;"servo off pmc axis group A"
#endif
#if {{ADDR}} >= 10 
                 WRT       ESOFB_{{PATH}}        ;"servo off pmc axis group B"
#endif

!! ---------------------------------------------------------------------------
!! {{PATH}}: override cancel group A
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
In case parameter 8005 bit 4 (PMCPOS) = 1
(Position control) the group specific override
cancel must be used. Set also 8007 bit 2 (VCP) = 1
*)
#endif
                 RD        SP_RUN_{{PATH}}       ;"spindle is turning"
#if {{ADDR}} < 10 
                 WRT       OVCEA_{{PATH}}        ;"override cancellation group A"
#endif
#if {{ADDR}} >= 10 
                 WRT       OVCEB_{{PATH}}        ;"override cancellation group B"
#endif

