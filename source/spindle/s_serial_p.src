//:--------------------------------------------------------------------------:
//: File              : s_serial__PATH__.src                                     :
//: Creation date     : 11.10.2013                                           :
//: Last modification : see table below                                      :
//: Author            : FANUC FA Switzerland / Peter Bloesch                 :
//: Description       : serial spindle                                       :
//:--------------------------------------------------------------------------:
//
//:--------------------------------------------------------------------------:
//:                     Modification                                         :
//:--------------------------------------------------------------------------:
//: Date   :Version: Sign  :Description                                      :
//:--------------------------------------------------------------------------:
//:16.07.14: 1.1.0 :Blp    :Monitoring logic for Safe Spindle rotation by    :
//:        :       :       :Hand for Cs contouring adapted                   :
//:--------------------------------------------------------------------------:
//:02.02.18: 2.0.0 :Blp    :spindle STO added                                :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:

// ===========================================================================
// Code
// ===========================================================================

// ---------------------------------------------------------------------------
// _PATH__: this module manages the first serial spindle.
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: this module manages the first serial spindle.
*)
#endif

#if dcs_support == 1
  #if (pmc_type != 2 && pmc_type < 6)
// ---------------------------------------------------------------------------
// spindle exitation
// ---------------------------------------------------------------------------
    #if net_comment == 1
// ---------------------------------------------------------------------------
// spindle exitation
// this signal will be DCS I/O cross checked
// ---------------------------------------------------------------------------
(*
spindle exitation
this signal will be DCS I/O cross checked
*)
    #endif
    #if demo_control == 1
                 RD        LOG1             ;"logic one"
    #else
                 RD        EXOFA__PATH__    ;"spindle exitation off"
    #endif
                 WRT       EXOF1__PATH__    ;"spindle exitation off"

// ---------------------------------------------------------------------------
// Monitoring logic for Safe Spindle rotation by Hand:
// Alarm results if Spindle is excitated (EXOF=0) when
//   - Door is open
//   - Hold to Run button is not pressed or setup mode is not active
// ---------------------------------------------------------------------------
    #if net_comment == 1
(*
Monitoring logic for Safe Spindle rotation by Hand:
Alarm results if Spindle is excitated (EXOF=0) when
   - Door is open
   - Hold to Run button is not pressed or setup mode 01
     is not active
*)
    #endif
    #if cs_contour_ctrl__PATH__ == 1
                 RD.NOT    HTR                  ;"hold to run button"
                 OR.NOT    SET_M01              ;"setup mode 01"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 AND.NOT   EXOF1__PATH__        ;"spindle exitation off"
                 AND       FSCSL__PATH__        ;"Cs contour ctrl active"
                 RD.STK.NOT LOG1                ;"logic one"
                 AND.NOT   FSCSL__PATH__        ;"Cs contour ctrl active"
                 OR.STK    
                 TMRB      
                           0
                           500
                 WRT       SP_MON_A__PATH__     ;"spindle monitoring logic A"
                 RD.NOT    HTR                  ;"hold to run button"
                 OR.NOT    SET_M01              ;"setup mode 01"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 AND.NOT   EXOF1__PATH__        ;"spindle exitation off"
                 AND.NOT   FSCSL__PATH__        ;"Cs contour ctrl active"
                 RD.STK.NOT LOG1                ;"logic one"
                 AND       FSCSL__PATH__        ;"Cs contour ctrl active"
                 OR.STK    
                 TMRB      
                           0
                           500
                 WRT       SP_MON_B__PATH__     ;"spindle monitoring logic B"
    #else
                 RD.NOT    LOG1                 ;"logic one"
                 WRT       SP_MON_A__PATH__     ;"spindle monitoring logic A"

                 RD.NOT    HTR                  ;"hold to run button"
                 OR.NOT    SET_M01              ;"setup mode 01"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 AND.NOT   EXOF1__PATH__        ;"spindle exitation off"
                 TMRB      
                           0
                           500
                 WRT       SP_MON_B__PATH__     ;"spindle monitoring logic B"
    #endif
  #endif
  #if (pmc_type == 2 || pmc_type >= 6) 
// ---------------------------------------------------------------------------
// spindle torque on
// replace T_BIT000 with the spindle torque output Yxxx.y
// ---------------------------------------------------------------------------
      #if net_comment == 1
(*
spindle torque on
replace T_BIT000 with the spindle torque output Yxxx.y
*)
      #endif
                 RD        *SGOPN               ;"guard state doors closed"
                 OR        DCS_S02              ;"DCS speed set 2"
                 WRT.NOT   SP_STO_MON__PATH__   ;"spindle safe torque off"
                 WRT       T_BIT000             ;"temporary bit 000"
  #endif
#endif

// ---------------------------------------------------------------------------
// _PATH__: soft start/stop
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: soft start/stop
parameter setting: N04030 (soft start/stop time)
*)
#endif
                 RD.NOT    SETUP__PATH__        ;"set-up active"
                 WRT       SOGNA__PATH__        ;"soft start/stop signal"

// ---------------------------------------------------------------------------
// _PATH__: ready and alarm signals
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: ready and alarm signals
*)
#endif
#if dcs_support == 1
                 RD        *SGOPN               ;"guard state doors closed"
   #if cs_contour_ctrl__PATH__ == 1
                 OR        FSCSL__PATH__        ;"Cs contour ctrl active"
   #endif
                 OR        SET_M01_EN           ;"enable setup mode 01"
                 AND       *ESP__PATH__         ;"emergency stop signal"
#else
                 RD        *ESP__PATH__         ;"emergency stop signal"
#endif
                 WRT       *ESPA__PATH__        ;"emergency stop spindle"

                 RD        MA__PATH__           ;"cnc ready signal"
                 AND       SA__PATH__           ;"servo ready signal"
                 WRT       MRDYA__PATH__        ;"machine ready signal"

                 RD        ALMA__PATH__         ;"alm signal serial spindle"
                 WRT       SP_ALM__PATH__       ;"spindle alarm"

                 RD        RST__PATH__          ;"resetting signal"
                 AND       ALMA__PATH__         ;"alm signal serial spindle"
                 WRT       ARSTA__PATH__        ;"alarm reset signal"

// ---------------------------------------------------------------------------
// _PATH__: impulse to restart the timer for the speed arrival signal
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: impulse to restart the timer for the speed arrival signal
*)
#endif
                 RD        SP_CW__PATH__        ;"spindle start cw"
                 AND       SRVA__PATH__         ;"ccw command signal"
                 RD.STK    SP_CCW__PATH__       ;"spindle start ccw"
                 AND       SFRA__PATH__         ;"cw command signal"
                 OR.STK
                 OR        RE_SCH__PATH__       ;"rising edge speed change"
                 WRT       sr_sar__PATH__       ;"restart timer for sp_sar"

// ---------------------------------------------------------------------------
// _PATH__: global variable: SP_RUN__PATH__ (spindle turning)
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: global variable: SP_RUN__PATH__ (spindle turning)
*)
#endif
                 RD        SP_CW__PATH__        ;"spindle start cw"
                 OR        SP_CCW__PATH__       ;"spindle start ccw"
                 WRT       SP_RUN__PATH__       ;"spindle is turning"

// ---------------------------------------------------------------------------
// _PATH__: Cs contour control
// ---------------------------------------------------------------------------
#if cs_contour_ctrl__PATH__ == 1
   #if net_comment == 1
(*
_PATH__: Cs contour control
*)
   #endif
                 RD        M027__PATH__         ;"Cs contour ctrl on"
                 AND       SSTA__PATH__         ;"spindle speed zero"
                 RD.STK    CON__PATH__          ;"Cs contour ctrl"
                 AND.NOT   M005__PATH__         ;"spindle stop"
                 AND.NOT   M028__PATH__         ;"Cs contour ctrl off"
                 AND.NOT   ALMA__PATH__         ;"alm signal serial spindle"
                 AND.NOT   SP_RUN__PATH__       ;"spindle is turning"
   #if spindle_orientation__PATH__ >  0
                 AND.NOT   M019__PATH__         ;"spindle orientation"
   #endif
   #if rigid_tapping__PATH__ == 1
                 AND.NOT   M029__PATH__         ;"rigid tapping"
   #endif
                 OR.STK
                 WRT       CON__PATH__          ;"Cs contour ctrl"
                 RD        M027__PATH__         ;"Cs contour ctrl on"
                 AND       CON__PATH__          ;"Cs contour ctrl"
                 AND       FSCSL__PATH__        ;"Cs contour ctrl active"
                 RST       M027__PATH__         ;"Cs contour ctrl on"
                 RD        M028__PATH__         ;"Cs contour ctrl off"
                 AND.NOT   CON__PATH__          ;"Cs contour ctrl"
                 AND.NOT   FSCSL__PATH__        ;"Cs contour ctrl active"
                 RST       M028__PATH__         ;"Cs contour ctrl off"
#endif

// ---------------------------------------------------------------------------
// _PATH__: spindle start / stop
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: spindle start / stop
*)
#endif
                 RD        SP_CW__PATH__        ;"spindle start cw"
#if rigid_tapping__PATH__ == 1 || cs_contour_ctrl__PATH__ == 1
                 RD.STK    SSTA__PATH__         ;"spindle speed zero"
                 OR        SFRA__PATH__         ;"cw command signal"
   #if rigid_tapping__PATH__ == 1 && cs_contour_ctrl__PATH__ == 0
                 AND       RGTAP__PATH__        ;"rigid tapping signal"
   #endif
   #if rigid_tapping__PATH__ == 0 && cs_contour_ctrl__PATH__ == 1
                 AND       CON__PATH__          ;"Cs contour ctrl"
   #endif
   #if rigid_tapping__PATH__ == 1 && cs_contour_ctrl__PATH__ == 1
                 RD.STK    RGTAP__PATH__        ;"rigid tapping signal"
                 OR        CON__PATH__          ;"Cs contour ctrl"
                 AND.STK
   #endif
                 OR.STK
#endif
                 WRT       SFRA__PATH__         ;"cw command signal"

                 RD        SP_CCW__PATH__       ;"spindle start ccw"
                 WRT       SRVA__PATH__         ;"ccw command signal"

                 RD.NOT    SP_CW__PATH__        ;"spindle start cw"
                 AND.NOT   SP_CCW__PATH__       ;"spindle start ccw"
                 WRT.NOT   *SSTP__PATH__        ;"spindle stop signal"

// ---------------------------------------------------------------------------
// global variables: SP_STP (spindle stopped)
//                   SAR    (speed arrival signal)
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: global variable: SP_STP__PATH__  (spindle stopped)
*)
#endif
                 RD        SSTA__PATH__         ;"spindle speed zero"
#if demo_control == 1
                 OR        LOG1                 ;"logic one"
#endif
                 AND.NOT   *SSTP__PATH__        ;"spindle stop signal"
                 WRT       SP_STP__PATH__       ;"spindle stopped"


// ---------------------------------------------------------------------------
// _PATH__: delay speed arrival
// ---------------------------------------------------------------------------
#if net_comment == 1
(*
_PATH__: delay speed arrival
*)
#endif
                 RD        SARA__PATH__         ;"sp speed arrival signal"
#if demo_control == 1
                 OR        LOG1                 ;"logic one"
#endif
                 AND       SP_RUN__PATH__       ;"spindle is turning"
                 AND.NOT   sr_sar__PATH__       ;"restart timer for sp_sar"
                 TMRB
                           0
                           200
                 WRT       SP_SAR__PATH__       ;"spindle speed arrival"


// ---------------------------------------------------------------------------
// _PATH__: rigid tapping
// ---------------------------------------------------------------------------
#if rigid_tapping__PATH__ == 1
   #if net_comment == 1
(*
_PATH__: rigid tapping
*)
   #endif
                 RD        SSTA__PATH__         ;"spindle speed zero"
                 OR        RGTAP__PATH__        ;"rigid tapping signal"
                 AND       RTAP__PATH__         ;"rigid tapping in progress"
                 WRT       RGTAP__PATH__        ;"rigid tapping signal"

                 RD        RGTAP__PATH__        ;"rigid tapping signal"
                 TMRB
                           0
                           300
                 RST       M029__PATH__         ;"rigid tapping"
#endif

// ---------------------------------------------------------------------------
// _PATH__: spindle orientation
// ---------------------------------------------------------------------------
#if spindle_orientation__PATH__ >  0
   #if net_comment == 1
(*
_PATH__: spindle orientation
*)
   #endif
                 CALLU     SpiOri__PATH__       ;"spindle orientation"
#endif

#if dcs_support == 1
// ---------------------------------------------------------------------------
// _PATH__: DCS related speed check in case of open doors
// set data:   MAX_SP__PATH__ (max spindle speed)
//             MAX_SPSET__PATH__ (max setup spindle speed)
//
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: DCS related speed check in case of open doors
set data: MAX_SP__PATH__ (max spindle speed)
          MAX_SPSET__PATH__ (max setup spindle speed)
*)
   #endif
// ---------------------------------------------------------------------------
// _PATH__: moving the programmed spindle speed into the temporary
// variables for further calculations
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: moving the programmed spindle speed into the temporary
variables for further calculations
*)
   #endif

                 RD        LOG1                 ;"logic one"
                 MOVD      
                           S00-S31__PATH__      ;"spindle speed code"
                           TMP_B00              ;"temporary byte 00"

// ---------------------------------------------------------------------------
// _PATH__: comparison of programmed and maximal spindle speed
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: comparison of programmed and maximal spindle speed
*)
   #endif
                 RD        LOG1                 ;"logic one"
                 LED       
                           TMP_B00              ;"temporary byte 00"
                           MAX_SP__PATH__       ;"maximal spindle speed"
                 WRT       pgspok__PATH__       ;"prog. spindle speed ok"

// ---------------------------------------------------------------------------
// _PATH__: if the programmed speed is to high, the speed will be
// clamped to the maximal allowed speed
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: if the programmed speed is to high, the speed will be
clamped to the maximal allowed speed
*)
   #endif
                 RD.NOT    pgspok__PATH__       ;"prog. spindle speed ok"
                 MOVD      
                           MAX_SP__PATH__       ;"maximal spindle speed"
                           TMP_B00              ;"temporary byte 00"

                 RD.NOT    pgspok__PATH__       ;"prog. spindle speed ok"
                 AND.NOT   M_1XXX__PATH__       ;"emergency message active"
                 AND       POW_OK__PATH__       ;"power supply axis ok"
                 WRT       SP_S_NOK__PATH__     ;"spindle speed not ok"

// ---------------------------------------------------------------------------
// _PATH__: initialisation of temporary variables (4 bytes)
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: initialisation of temporary variables (4 bytes)
*)
   #endif
                 RD        LOG1                 ;"logic one"
                 NUMEB     
                           4
                           0
                           TMP_B04              ;"temporary byte 04"

// ---------------------------------------------------------------------------
// _PATH__: multiplication of the spindle speed with the spindle override
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: multiplication of the spindle speed with the spindle
override
*)
   #endif
                 RD        LOG1                 ;"logic one"
                 MOVB      
                           SOV__PATH__          ;"spindle speed ovr signal"
                           TMP_B04              ;"temporary byte 04"
                 RD        RST__PATH__          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB      
                           1004
                           TMP_B00              ;"temporary byte 00"
                           TMP_B04              ;"temporary byte 04"
                           TMP_B00              ;"temporary byte 00"
                 WRT       emuspov__PATH__      ;"multipl. err spindle ovr."
                 RD        RST__PATH__          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB      
                           4
                           TMP_B00              ;"temporary byte 00"
                           100
                           TMP_B00              ;"temporary byte 00"
                 WRT       edispov__PATH__      ;"division err spindle ovr."

// ---------------------------------------------------------------------------
// _PATH__: checking max. setup speed
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: checking max. setup speed
*)
   #endif
                 RD.NOT    *SGOPN               ;"guard state doors closed"
                 GTD       
                           TMP_B00              ;"temporary byte 00"
                           MAX_SPSET__PATH__    ;"max spindle setup speed"
                 WRT       sp_mset__PATH__      ;"max. spind. setup speed"
                 RD        sp_mset__PATH__      ;"max. spind. setup speed"
                 MOVD      
                           MAX_SPSET__PATH__    ;"max spindle setup speed"
                           TMP_B00              ;"temporary byte 00"

// ---------------------------------------------------------------------------
// _PATH__: calculation of the output value for the analog output
// 4095 * prog. spindle speed / max. allowed speed 
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: calculation of the output value for the analog output
4095 * prog. spindle speed / max. allowed speed
*)
   #endif
                 RD        RST__PATH__          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 MULB      
                           4
                           TMP_B00              ;"temporary byte 00"
                           4095
                           TMP_B00              ;"temporary byte 00"
                 WRT       emusps__PATH__       ;"multipl. err spindle speed"
                 RD        RST__PATH__          ;"resetting signal"
                 RD.STK    LOG1                 ;"logic one"
                 DIVB      
                           1004
                           TMP_B00              ;"temporary byte 00"
                           MAX_SP__PATH__       ;"maximal spindle speed"
                           TMP_B00              ;"temporary byte 00"
                 WRT       edisps__PATH__       ;"division err spindle speed"

// ---------------------------------------------------------------------------
// _PATH__: if the value is greater than 4095 the value will be clamped to 4095
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: if the value is greater than 4095 the value will be clamped
to 4095
*)
   #endif
                 RD        LOG1                 ;"logic one"
                 LED       
                           4095
                           TMP_B00              ;"temporary byte 00"
                 WRT       maxsdr__PATH__       ;"max. spindle speed reached"
                 RD        maxsdr__PATH__       ;"max. spindle speed reached"
                 NUMEB     
                           4
                           4095
                           TMP_B00              ;"temporary byte 00"

// ---------------------------------------------------------------------------
// _PATH__: when stopping the spindle the output value must be 0
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: when stopping the spindle the output value must be 0
*)
   #endif
                 RD.NOT    SP_RUN__PATH__       ;"spindle is turning"
                 OR        *SGOPN               ;"guard state doors closed"
                 NUMEB     
                           4
                           0
                           TMP_B00              ;"temporary byte 00"

// ---------------------------------------------------------------------------
// _PATH__: spindle motor speed command
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: spindle motor speed command
*)
   #endif
                 RD        LOG1                 ;"logic one"
                 AND       
                           2
                           TMP_B00              ;"temporary byte 00"
                           4095
                           ROXL__PATH__         ;"sp motor speed command"

// ---------------------------------------------------------------------------
// _PATH__: PMC spindle control
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: PMC spindle control
*)
   #endif
                 RD.NOT    *SGOPN               ;"guard state doors closed"
                 WRT       SIND__PATH__         ;"spindle mode select signal"

// ---------------------------------------------------------------------------
// _PATH__: DCS spindle specific MCC off signal
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: DCS spindle specific MCC off signal
*)
   #endif
   #if demo_control == 1
                 RD        LOG1                 ;"logic one"
   #else
                 RD        *MCFP1__PATH__       ;"MCC off signal 1st spindle"
   #endif
                 WRT       M*MCFP1__PATH__      ;"1st spindle MCC off signal"

// ---------------------------------------------------------------------------
// _PATH__: DCS spindle specific monitoring signal
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: DCS spindle specific monitoring signal
*)
   #endif
   #if demo_control == 1
                 RD        LOG1                 ;"logic one"
   #else
                 RD        RSP1__PATH__         ;"monit. result 1st spindle"
   #endif
                 WRT       MRSP1__PATH__        ;"1st spindle monit. result"

   #if (pmc_type != 2 && pmc_type < 6)
// ---------------------------------------------------------------------------
// _PATH__: DCS spindle safety check deactivation at closed doors and emergency stop
// ---------------------------------------------------------------------------
      #if net_comment == 1
(*
_PATH__: DCS spindle safety check deactivation at closed doors and
emergency stop
*)
      #endif
                 RD        *SGOPN               ;"guard state doors closed"
                 OR        EXOF1__PATH__        ;"spindle exitation off"
                 RD.STK.NOT *ESP__PATH__        ;"emergency stop signal"
                 AND       *SMC                 ;"MCC contact state(group)"
                 OR.STK    
                 WRT       *VLDP1__PATH__       ;"saf. check req. 1st spin."

// ---------------------------------------------------------------------------
// _PATH__: DCS safety zero speed monitoring
// ---------------------------------------------------------------------------
      #if net_comment == 1
(*
_PATH__: DCS safety zero speed monitoring
*)
      #endif
                 RD.NOT    DCS_S02              ;"DCS speed set 2"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 AND.NOT   EXOF1__PATH__        ;"spindle exitation off"
                 WRT       SPZR1__PATH__        ;"zero mon. req. 1st spin."
   #endif

   #if (pmc_type == 2 || pmc_type >= 6) 
// ---------------------------------------------------------------------------
// _PATH__: DCS spindle safety check deactivation at closed doors and emergency stop
// ---------------------------------------------------------------------------
      #if net_comment == 1
(*
_PATH__: DCS spindle safety check deactivation at closed doors and
emergency stop
*)
      #endif
                 RD        *SGOPN               ;"guard state doors closed"
                 OR        SP_STO_MON__PATH__   ;"spindle safe torque off"
                 WRT       *VLDP1__PATH__       ;"saf. check req. 1st spin."

// ---------------------------------------------------------------------------
// _PATH__: DCS safety zero speed monitoring
// ---------------------------------------------------------------------------
      #if net_comment == 1
(*
_PATH__: DCS safety zero speed monitoring
*)
      #endif
                 RD.NOT    DCS_S02              ;"DCS speed set 2"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 AND.NOT   SP_STO_MON__PATH__   ;"spindle safe torque off"
                 WRT       SPZR1__PATH__        ;"zero mon. req. 1st spin."
   #endif

// ---------------------------------------------------------------------------
// _PATH__: DCS selection of safety speed set 2
// ---------------------------------------------------------------------------
   #if net_comment == 1
(*
_PATH__: DCS selection of safety speed set 2
*)
   #endif
                 RD        DCS_S02              ;"DCS speed set 2"
                 WRT       SPA1__PATH__         ;"saf. sel. A 1st spindle"
#endif
