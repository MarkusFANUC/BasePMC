!!:--------------------------------------------------------------------------:
!!: File              : spictrl_{{PATH}}.src                                      :
!!: Creation date     : 09.12.2013                                           :
!!: Last modification : see table below                                      :
!!: Author            : FANUC FA Switzerland / Peter Bloesch                 :
!!: Description       : Spindle control                                      :
!!:--------------------------------------------------------------------------:
!!
!!:--------------------------------------------------------------------------:
!!:                     Modification                                         :
!!:--------------------------------------------------------------------------:
!!: Date   :Version: Sign  :Description                                      :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:
!!:        :       :       :                                                 :
!!:--------------------------------------------------------------------------:

!! ===========================================================================
!! Code
!! ===========================================================================

!! ---------------------------------------------------------------------------
!! s code decoding (uses the high speed M/S/T/B interface)
!! parameter setting: 3001 bit 7 = 1 (MHI)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
s code decoding (uses the high speed M/S/T/B interface)
parameter setting: 3001 bit 7 = 1 (MHI)
*)
#endif

!! -----------------------------------------------
!! {{PATH}}: sending completition signal to the cnc
!! -----------------------------------------------
#if net_comment == 1
(*
{{PATH}}: sending completition signal to the cnc
*)
#endif
                 RD        s_fin_{{PATH}}        ;"s_code finished"
                 AND       SF_{{PATH}}           ;"spindle strobe signal"
                 RD.STK.NOT s_fin_{{PATH}}       ;"s_code finished"
                 AND       SFIN_{{PATH}}         ;"sp function compl. signal"
                 OR.STK
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       SFIN_{{PATH}}         ;"sp function compl. signal"

!! ---------------------------------------------------------------------------
!! {{PATH}}: s code strobe
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: s code strobe
*)
#endif
                 RD        SF_{{PATH}}           ;"spindle strobe signal"
                 AND.NOT   SFIN_{{PATH}}         ;"sp function compl. signal"
                 RD.STK.NOT SF_{{PATH}}          ;"spindle strobe signal"
                 AND       SFIN_{{PATH}}         ;"sp function compl. signal"
                 OR.STK
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       s_code_{{PATH}}       ;"s_code active"

!! -----------------------------------------------
!! {{PATH}}: check if programmed spindle speed changes
!! -----------------------------------------------
#if net_comment == 1
(*
{{PATH}}: check if programmed spindle speed changes
*)
#endif
                 RD        s_code_{{PATH}}       ;"s_code active"
                 EQD       
                           S00-S31_{{PATH}}      ;"spindle speed code"
                           mscode_{{PATH}}       ;"memory spindle speed code"
                 WRT       nospch_{{PATH}}       ;"no spindle speed change"

!! -----------------------------------------------
!! {{PATH}}: memory for the actual programmed spindle speed
!! -----------------------------------------------
#if net_comment == 1
(*
{{PATH}}: memory for the actual programmed spindle speed
*)
#endif
                 RD        s_fin_{{PATH}}        ;"s_code finished"
                 OR.NOT    FICYCL               ;"first cycle finished"
                 MOVD      
                           S00-S31_{{PATH}}      ;"spindle speed code"
                           mscode_{{PATH}}       ;"memory spindle speed code"

!! -----------------------------------------------
!! {{PATH}}: rising edge of the speed change
!! -----------------------------------------------
#if net_comment == 1
(*
{{PATH}}: rising edge of the speed change
*)
#endif
                 RD        s_code_{{PATH}}       ;"s_code active"
                 AND.NOT   nospch_{{PATH}}       ;"no spindle speed change"
                 AND.NOT   ms_cod_{{PATH}}       ;"memory s_code"
                 WRT       RE_SCH_{{PATH}}       ;"rising edge speed change"

                 RD        s_code_{{PATH}}       ;"s_code active"
                 WRT       ms_cod_{{PATH}}       ;"memory s_code"

!! -----------------------------------------------
!! {{PATH}}: speed change finished
!! -----------------------------------------------
#if net_comment == 1
(*
{{PATH}}: speed change finished
*)
#endif
                 RD        s_code_{{PATH}}       ;"s_code active"
                 WRT       s_fin_{{PATH}}        ;"s_code finished"


!! ---------------------------------------------------------------------------
!! {{PATH}}: manual spindle start / stop
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: manual spindle start / stop
*)
#endif
                 RD        K_SPCW_{{PATH}}       ;"key spindle cw"
                 AND.NOT   K_SPCCW_{{PATH}}      ;"key spindle ccw"
                 AND.NOT   K_SPSP_{{PATH}}       ;"key spindle stop"
                 AND       M_MAN_{{PATH}}        ;"manual mode active"
                 WRT       mspcw_{{PATH}}        ;"manual spindle start cw"

                 RD        K_SPCCW_{{PATH}}      ;"key spindle ccw"
                 AND.NOT   K_SPCW_{{PATH}}       ;"key spindle cw"
                 AND.NOT   K_SPSP_{{PATH}}       ;"key spindle stop"
                 AND       M_MAN_{{PATH}}        ;"manual mode active"
                 WRT       mspccw_{{PATH}}       ;"manual spindle start ccw"

                 RD        K_SPSP_{{PATH}}       ;"key spindle stop"
                 RD.STK.NOT SP_CW_{{PATH}}       ;"spindle start cw"
                 AND.NOT   SP_CCW_{{PATH}}       ;"spindle start ccw"
                 OR.STK
                 AND.NOT   K_SPCW_{{PATH}}       ;"key spindle cw"
                 AND.NOT   K_SPCCW_{{PATH}}      ;"key spindle ccw"
                 AND       M_MAN_{{PATH}}        ;"manual mode active"
                 WRT       msp_sp_{{PATH}}       ;"manual spindle stop"
                 WRT       L_SPSP_{{PATH}}       ;"led spindle stop"

!! ---------------------------------------------------------------------------
!! {{PATH}}: M00, M01: memorize spindle rotation state
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: M00, M01: memorize spindle rotation state
*)
#endif
                 RD        M000_{{PATH}}         ;"stop program run"
                 RD.STK    M001_{{PATH}}         ;"optional stop"
                 AND       O_STOP_{{PATH}}       ;"optional stop m01 active"
                 OR.STK
                 RD.STK    SP_CW_{{PATH}}        ;"spindle start cw"
                 OR        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND.STK
                 OR        sp_m_{{PATH}}         ;"memory spindle turning"
                 RD.STK.NOT ST_{{PATH}}          ;"cycle start signal"
                 RD.STK.NOT SP_CW_{{PATH}}       ;"spindle start cw"
                 AND.NOT   SP_CCW_{{PATH}}       ;"spindle start ccw"
                 OR.STK
                 AND.STK
                 AND       M_AUTO_{{PATH}}       ;"automatic mode active"
                 AND.NOT   RST_{{PATH}}          ;"resetting signal"
                 WRT       sp_m_{{PATH}}         ;"memory spindle turning"

                 RD        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 OR        spccwm_{{PATH}}       ;"memory spindle turning ccw"
                 AND       sp_m_{{PATH}}         ;"memory spindle turning"
                 WRT       spccwm_{{PATH}}       ;"memory spindle turning ccw"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle stop conditions
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle stop conditions
*)
#endif
                 RD        msp_sp_{{PATH}}       ;"manual spindle stop"
                 OR        M005_{{PATH}}         ;"spindle stop"
                 OR        M000_{{PATH}}         ;"stop program run"
                 RD.STK    M001_{{PATH}}         ;"optional stop"
                 AND       O_STOP_{{PATH}}       ;"optional stop m01 active"
                 OR.STK
#if spindle_orientation_{{PATH}} > 0 and spindle_support_{{PATH}} == 1
                 OR        OR_FIN_{{PATH}}       ;"sp orientation finished"
#endif
                 OR        RST_{{PATH}}          ;"resetting signal"
                 OR.NOT    POW_OK_{{PATH}}       ;"power suply axis ok"
                 OR        M_1XXX_{{PATH}}       ;"emergency message active"
#if spindle_support_{{PATH}} == 1 or spindle_support_{{PATH}} == 5
   #if rigid_tapping_{{PATH}} == 1
                 OR        RTAP_{{PATH}}         ;"rigid tapping in progress"
   #endif
#endif
#if spindle_support_{{PATH}} == 1 and cs_contour_ctrl_{{PATH}} == 1
                 OR        M027_{{PATH}}         ;"Cs contour ctrl on"
#endif
#if dcs_support == 1
                 RD.STK.NOT HTR                 ;"hold to run button"
                 OR.NOT    SET_M01              ;"setup mode 01"
                 AND.NOT   *SGOPN               ;"guard state doors closed"
                 OR.STK    
#endif
                 WRT       s_stpc_{{PATH}}       ;"spindle stop conditions"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle start in automatic modes
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle start in automatic modes
*)
#endif
                 RD        M003_{{PATH}}         ;"spindle start clockwise"
#if coolant_support_{{PATH}} > 0 and coolant_support_P01 > -1
                 OR        M013_{{PATH}}         ;"sp start cw coolant on"
#endif
                 RD.STK    ST_{{PATH}}           ;"cycle start signal"
                 AND       sp_m_{{PATH}}         ;"memory spindle turning"
                 AND.NOT   spccwm_{{PATH}}       ;"memory spindle turning ccw"
                 OR.STK
                 WRT       aspcw_{{PATH}}        ;"sp start cw in auto-mode"

                 RD        M004_{{PATH}}         ;"spindle start counterclockwise"
#if coolant_support_{{PATH}} > 0 and coolant_support_P01 > -1
                 OR        M014_{{PATH}}         ;"sp start ccw coolant on"
#endif
                 RD.STK    ST_{{PATH}}           ;"cycle start signal"
                 AND       sp_m_{{PATH}}         ;"memory spindle turning"
                 AND       spccwm_{{PATH}}       ;"memory spindle turning ccw"
                 OR.STK
                 WRT       aspccw_{{PATH}}       ;"sp start ccw in auto-mode"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable SP_CW_{{PATH}} (spindle start clockwise)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable SP_CW_{{PATH}} (spindle start clockwise)
*)
#endif
                 RD        aspcw_{{PATH}}        ;"sp start cw in auto-mode"
                 OR        mspcw_{{PATH}}        ;"manual spindle start cw"
                 OR        SP_CW_{{PATH}}        ;"spindle start cw"
                 AND.NOT   aspccw_{{PATH}}       ;"sp start ccw in auto-mode"
                 AND.NOT   mspccw_{{PATH}}       ;"manual spindle start ccw"
                 AND.NOT   s_stpc_{{PATH}}       ;"spindle stop conditions"
                 WRT       SP_CW_{{PATH}}        ;"spindle start cw"

                 RD        SP_CW_{{PATH}}        ;"spindle start cw"
                 AND       M_MAN_{{PATH}}        ;"manual mode active"
                 WRT       L_SPCW_{{PATH}}       ;"led spindle cw"

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable SP_CCW_{{PATH}} (spindle start counterclockwise)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable SP_CCW_{{PATH}} (spindle start counterclockwise)
*)
#endif
                 RD        aspccw_{{PATH}}       ;"sp start ccw in auto-mode"
                 OR        mspccw_{{PATH}}       ;"manual spindle start ccw"
                 OR        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND.NOT   aspcw_{{PATH}}        ;"sp start cw in auto-mode"
                 AND.NOT   mspcw_{{PATH}}        ;"manual spindle start cw"
                 AND.NOT   s_stpc_{{PATH}}       ;"spindle stop conditions"
                 WRT       SP_CCW_{{PATH}}       ;"spindle start ccw"

                 RD        SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND       M_MAN_{{PATH}}        ;"manual mode active"
                 WRT       L_SPCCW_{{PATH}}      ;"led spindle ccw"


!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle override
!! to show the spindle override on the screen set parameter
!! 3106 bit 5 = 1 (SOV)                                    
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle override
to show the spindle override on the screen set parameter
3106 bit 5 = 1 (SOV)                                    
*)
#endif
                 RD        LOG1                 ;"logic one"
                 MOVB      
                           SOVRS_{{PATH}}        ;"spindle override in %"
                           SOV_{{PATH}}          ;"spindle speed override"

!! ---------------------------------------------------------------------------
!! {{PATH}}: spindle specific functions
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: spindle specific functions
*)
#endif
                 CALLU     SpiRun_{{PATH}}       !! SPINDLE SPEED CONTROL

!! ---------------------------------------------------------------------------
!! {{PATH}}: global variable:  SAR    (speed arrival signal)
!! ---------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: global variable:  SAR_{{PATH}}  (speed arrival signal)
To use the SAR signal set parameter 3708 bit 0 = 1 (SAR) and a
delay time in parameter 3740
*)
#endif
                 RD        SP_SAR_{{PATH}}       ;"spindle speed arrival"
                 OR        SP_STP_{{PATH}}       ;"spindle stopped"
                 WRT       SAR_{{PATH}}          ;"spindle speed arrival"

!! --------------------------------------------------------------------------
!! {{PATH}}: management of M03 and M04
!! --------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: management of M03 and M04
*)
#endif
                 RD        M003_{{PATH}}         ;"spindle start cw"
                 AND       SP_CW_{{PATH}}        ;"spindle start cw"
                 RST       M003_{{PATH}}         ;"spindle start cw"

                 RD        M004_{{PATH}}         ;"spindle start ccw"
                 AND       SP_CCW_{{PATH}}       ;"spindle start ccw"
                 RST       M004_{{PATH}}         ;"spindle start ccw"


#if coolant_support_{{PATH}} > 0 and coolant_support_P01 > -1
!! --------------------------------------------------------------------------
!! {{PATH}}: management of M13 and M14
!! --------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: management of M13 and M14
*)
#endif
                 RD        M013_{{PATH}}         ;"sp start cw coolant on"
                 AND       SP_CW_{{PATH}}        ;"spindle start cw"
                 AND       COOLON_{{PATH}}       ;"coolant on"
                 RST       M013_{{PATH}}         ;"sp start cw coolant on"

                 RD        M014_{{PATH}}         ;"sp start ccw coolant on"
                 AND       SP_CCW_{{PATH}}       ;"spindle start ccw"
                 AND       COOLON_{{PATH}}       ;"coolant on"
                 RST       M014_{{PATH}}         ;"sp start ccw coolant on"
#endif

!! --------------------------------------------------------------------------
!! {{PATH}}: management of M05
!! --------------------------------------------------------------------------
#if net_comment == 1
(*
{{PATH}}: management of M05
*)
#endif
                 RD        M005_{{PATH}}         ;"spindle stop"
                 AND       SP_STP_{{PATH}}       ;"spindle stopped"
                 RST       M005_{{PATH}}         ;"spindle stop"


#if dcs_support == 1
   #if spindle_support_{{PATH}} == 1
!! --------------------------------------------------------------------------
!! {{PATH}}: checking DCS spindle specific MCC off signals
!! --------------------------------------------------------------------------
      #if net_comment == 1
(*
{{PATH}}: checking DCS spindle specific MCC off signals
*)
      #endif
                 RD.NOT    M*MCFP1_{{PATH}}      ;"1st spindle MCC off signal"
                 WRT       MCFPx_NOK_{{PATH}}    ;"mcc spindles not ok"

!! --------------------------------------------------------------------------
!! {{PATH}}: checking DCS spindle specific monitoring signals
!! --------------------------------------------------------------------------
      #if net_comment == 1
(*
{{PATH}}: checking DCS spindle specific monitoring signals
*)
      #endif
                 RD.NOT    MRSP1_{{PATH}}        ;"1st spindle monit. result"
                 WRT       RSPs_NOK_{{PATH}}     ;"rsp monitoring not ok"
   #endif
#endif
