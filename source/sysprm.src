//:--------------------------------------------------------------------------:
//: File              : sysprm.src                                           :
//: Creation date     : 05.11.2013                                           :
//: Last modification : see table below                                      :
//: Author            : FANUC FA Switzerland / Peter Bloesch                 :
//: Description       : System parameters and title                          :
//:--------------------------------------------------------------------------:
//
//:--------------------------------------------------------------------------:
//:                     Modification                                         :
//:--------------------------------------------------------------------------:
//: Date   :Version: Sign  :Description                                      :
//:--------------------------------------------------------------------------:
//:08.09.14: 1.1.0 :Blp    :0i-F added                                       :
//:--------------------------------------------------------------------------:
//:26.09.16: 2.0.0 :Blp    :I/O group assignment changed                     :
//:--------------------------------------------------------------------------:
//:26.06.20: 3.0.0 :Blp    :0i-D and 3xi-A removed, Function Block and       :
//:        :       :       :floating point added, I/O link removed           :
//:--------------------------------------------------------------------------:
//:        :       :       :                                                 :
//:--------------------------------------------------------------------------:

// ===========================================================================
// Include files
// ===========================================================================
#include "..\config.def"

// ===========================================================================
// system parameters
// ===========================================================================
%@A
%@0
2 BINARY
3 NO
// ---------------------------------------------------------------------------
// pmc type
// ---------------------------------------------------------------------------
// -----------------------------------
// Power Motion i-A
// -----------------------------------
#if pmc_type == 1
   #if pmc_mem_type == 0
      #if function_block == 1
4 Power Motion i-A PMC(MEM-B,FB,FLT)
      #else
4 Power Motion i-A PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 Power Motion i-A PMC(MEM-C,FB,FLT)
      #else
4 Power Motion i-A PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 Power Motion i-A PMC(MEM-D,FB,FLT)
      #else
4 Power Motion i-A PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 35i-B
// -----------------------------------
#if pmc_type == 2
   #if pmc_mem_type == 0
      #if function_block == 1
4 35i-B PMC(MEM-B,FB,FLT)
      #else
4 35i-B PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 35i-B PMC(MEM-C,FB,FLT)
      #else
4 35i-B PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 35i-B PMC(MEM-D,FB,FLT)
      #else
4 35i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 0i-F
// -----------------------------------
#if pmc_type == 3
   #if pmc_mem_type == 0
      #if function_block == 1
4 0i-F PMC(MEM-B,FB,FLT)
      #else
4 0i-F PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 0i-F PMC(MEM-C,FB,FLT)
      #else
4 0i-F PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 0i-F PMC(MEM-D,FB,FLT)
      #else
4 0i-F PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 32i-B
// -----------------------------------
#if pmc_type == 4
   #if pmc_mem_type == 0
      #if function_block == 1
4 32i-B PMC(MEM-B,FB,FLT)
      #else
4 32i-B PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 32i-B PMC(MEM-C,FB,FLT)
      #else
4 32i-B PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 32i-B PMC(MEM-D,FB,FLT)
      #else
4 32i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 31i-B
// -----------------------------------
#if pmc_type == 5
   #if pmc_mem_type == 0
      #if function_block == 1
4 31i-B PMC(MEM-B,FB,FLT)
      #else
4 31i-B PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 31i-B PMC(MEM-C,FB,FLT)
      #else
4 31i-B PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 31i-B PMC(MEM-D,FB,FLT)
      #else
4 31i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 30i-B
// -----------------------------------
#if pmc_type == 6
   #if pmc_mem_type == 0
      #if function_block == 1
4 30i-B PMC(MEM-B,FB,FLT)
      #else
4 30i-B PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
4 30i-B PMC(MEM-C,FB,FLT)
      #else
4 30i-B PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
4 30i-B PMC(MEM-D,FB,FLT)
      #else
4 30i-B PMC(MEM-D,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 3 || nbr_of_path > 10
      #if function_block == 1
4 30i-B PMC(MEM-E,FB,FLT)
      #else
4 30i-B PMC(MEM-E,FLT)
      #endif
   #endif
#endif

// ---------------------------------------------------------------------------
// I/O link assignment selection function
// ---------------------------------------------------------------------------
11 UNUSE
12 0
13 UNUSE
14 0
15 UNUSE
16 0
17 UNUSE
18 0

// ---------------------------------------------------------------------------
// Language display
// ---------------------------------------------------------------------------
31 1
32 -1
33 0

// ---------------------------------------------------------------------------
// Function Block
// ---------------------------------------------------------------------------
#if function_block == 1
100 NO
101 0-0
102 0-0
103 0-0
104 0-0
105 0-0
111 0-0
112 0-0
113 0-0
114 0-0
115 0-0
121 0-0
122 0-0
123 0-0
124 0-0
125 0-0
131 0-0
132 0-0
141 0-0
142 0-0
#endif

%
// ---------------------------------------------------------------------------
// title
// ---------------------------------------------------------------------------
%@1
01 MULTI-PATH BASE PMC PROGRAM
02

// -----------------------------------
// Power Motion i-A
// -----------------------------------
#if pmc_type == 1
   #if pmc_mem_type == 0
      #if function_block == 1
03 PMi-A PMC(MEM-B,FB,FLT)
      #else
03 PMi-A PMC(MEM-B,FLT)
      #endif
   #endif
   #if pmc_mem_type == 1
      #if function_block == 1
03 PMi-A PMC(MEM-C,FB,FLT)
      #else
03 PMi-A PMC(MEM-C,FLT)
      #endif
   #endif
   #if pmc_mem_type == 2
      #if function_block == 1
03 PMi-A PMC(MEM-D,FB,FLT)
      #else
03 PMi-A PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 35i-B
// -----------------------------------
#if pmc_type == 2
   #if pmc_mem_type == 0
      #if function_block == 1
03 35i-B PMC(MEM-B,FB,FLT)
      #else
03 35i-B PMC(MEM-B,FLT)
      #endif
   #endif
   #if pmc_mem_type == 1
      #if function_block == 1
03 35i-B PMC(MEM-C,FB,FLT)
      #else
03 35i-B PMC(MEM-C,FLT)
      #endif
   #endif
   #if pmc_mem_type == 2
      #if function_block == 1
03 35i-B PMC(MEM-D,FB,FLT)
      #else
03 35i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 0i-F
// -----------------------------------
#if pmc_type == 3
   #if pmc_mem_type == 0
      #if function_block == 1
03 0i-F PMC(MEM-B,FB,FLT)
      #else
03 0i-F PMC(MEM-B,FLT)
      #endif
   #endif
   #if pmc_mem_type == 1
      #if function_block == 1
03 0i-F PMC(MEM-C,FB,FLT)
      #else
03 0i-F PMC(MEM-C,FLT)
      #endif
   #endif
   #if pmc_mem_type == 2
      #if function_block == 1
03 0i-F PMC(MEM-D,FB,FLT)
      #else
03 0i-F PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 32i-B
// -----------------------------------
#if pmc_type == 4
   #if pmc_mem_type == 0
      #if function_block == 1
03 32i-B PMC(MEM-B,FB,FLT)
      #else
03 32i-B PMC(MEM-B,FLT)
      #endif
   #endif
   #if pmc_mem_type == 1
      #if function_block == 1
03 32i-B PMC(MEM-C,FB,FLT)
      #else
03 32i-B PMC(MEM-C,FLT)
      #endif
   #endif
   #if pmc_mem_type == 2
      #if function_block == 1
03 32i-B PMC(MEM-D,FB,FLT)
      #else
03 32i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 31i-B
// -----------------------------------
#if pmc_type == 5
   #if pmc_mem_type == 0
      #if function_block == 1
03 31i-B PMC(MEM-B,FB,FLT)
      #else
03 31i-B PMC(MEM-B,FLT)
      #endif
   #endif
   #if pmc_mem_type == 1
      #if function_block == 1
03 31i-B PMC(MEM-C,FB,FLT)
      #else
03 31i-B PMC(MEM-C,FLT)
      #endif
   #endif
   #if pmc_mem_type == 2
      #if function_block == 1
03 31i-B PMC(MEM-D,FB,FLT)
      #else
03 31i-B PMC(MEM-D,FLT)
      #endif
   #endif
#endif

// -----------------------------------
// 30i-B
// -----------------------------------
#if pmc_type == 6
   #if pmc_mem_type == 0
      #if function_block == 1
03 30i-B PMC(MEM-B,FB,FLT)
      #else
03 30i-B PMC(MEM-B,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 1
      #if function_block == 1
03 30i-B PMC(MEM-C,FB,FLT)
      #else
03 30i-B PMC(MEM-C,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 2
      #if function_block == 1
03 30i-B PMC(MEM-D,FB,FLT)
      #else
03 30i-B PMC(MEM-D,FLT)
      #endif
   #endif
   
   #if pmc_mem_type == 3 || nbr_of_path > 10
      #if function_block == 1
03 30i-B PMC(MEM-E,FB,FLT)
      #else
03 30i-B PMC(MEM-E,FLT)
      #endif
   #endif
#endif

08 PMC Dev
%
